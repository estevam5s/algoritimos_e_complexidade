import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  Box,
  Typography,
  Button,
  IconButton,
  Paper
} from '@mui/material';
import {
  Close as CloseIcon,
  ArrowBack as PrevIcon,
  ArrowForward as NextIcon,
  Download as DownloadIcon
} from '@mui/icons-material';

const aulasData = {
  'aula01': {
    title: 'üìò Aula 01: Algoritmos - Fun√ß√µes e Passagem de Par√¢metros',
    pdf: '/aulas/pdf/aula01.pdf',
    content: `
    <h1>Aula 01: Algoritmos - Fun√ß√µes e Passagem de Par√¢metros</h1>
    
    <p><strong>Disciplina:</strong> Algoritmos e Complexidade<br>
    <strong>Professor:</strong> Vagner Cordeiro<br>
    <strong>Carga Hor√°ria:</strong> 4 horas</p>

    <h2>Objetivos de Aprendizagem</h2>
    <p>Ao final desta aula, o estudante ser√° capaz de:</p>
    <ul>
        <li>Compreender conceitos fundamentais de algoritmos</li>
        <li>Dominar a cria√ß√£o e uso de fun√ß√µes</li>
        <li>Aplicar diferentes formas de passagem de par√¢metros</li>
        <li>Analisar o escopo de vari√°veis em fun√ß√µes</li>
    </ul>

    <h2>1. Conceitos Fundamentais de Algoritmos</h2>

    <h3>1.1 Defini√ß√£o de Algoritmo</h3>
    <p>Um <strong>algoritmo</strong> √© uma sequ√™ncia finita e ordenada de instru√ß√µes n√£o amb√≠guas que resolve um problema espec√≠fico ou realiza uma tarefa computacional.</p>

    <h3>1.2 Caracter√≠sticas Essenciais</h3>
    <ul>
        <li><strong>Finitude</strong>: Deve terminar ap√≥s um n√∫mero finito de passos</li>
        <li><strong>Defini√ß√£o</strong>: Cada instru√ß√£o deve ser clara e precisa</li>
        <li><strong>Entrada</strong>: Zero ou mais valores de entrada</li>
        <li><strong>Sa√≠da</strong>: Um ou mais valores de sa√≠da</li>
        <li><strong>Efetividade</strong>: Cada opera√ß√£o deve ser realiz√°vel</li>
    </ul>

    <h2>2. Fun√ß√µes em Algoritmos</h2>

    <h3>2.1 Conceito de Fun√ß√£o</h3>
    <p>Uma <strong>fun√ß√£o</strong> √© um bloco de c√≥digo que executa uma tarefa espec√≠fica e pode ser reutilizado em diferentes partes do programa.</p>

    <h3>2.2 Vantagens das Fun√ß√µes</h3>
    <ul>
        <li><strong>Modularidade</strong>: Divis√£o do problema em partes menores</li>
        <li><strong>Reutiliza√ß√£o</strong>: C√≥digo pode ser usado m√∫ltiplas vezes</li>
        <li><strong>Manutenibilidade</strong>: Facilita corre√ß√µes e melhorias</li>
        <li><strong>Legibilidade</strong>: Torna o c√≥digo mais compreens√≠vel</li>
    </ul>
    `
  },
  'aula02': {
    title: 'üìó Aula 02: Estruturas de Dados - Homog√™neas, Heterog√™neas e Ponteiros',
    pdf: '/aulas/pdf/aula02.pdf',
    content: `
    <h1>Aula 02: Estruturas de Dados - Homog√™neas, Heterog√™neas e Ponteiros</h1>
    
    <p><strong>Disciplina:</strong> Algoritmos e Complexidade<br>
    <strong>Professor:</strong> Vagner Cordeiro<br>
    <strong>Carga Hor√°ria:</strong> 4 horas</p>

    <h2>Objetivos de Aprendizagem</h2>
    <ul>
        <li>Compreender estruturas de dados homog√™neas e heterog√™neas</li>
        <li>Dominar conceitos avan√ßados de ponteiros</li>
        <li>Implementar arrays e matrizes eficientemente</li>
        <li>Aplicar structs para organiza√ß√£o de dados complexos</li>
    </ul>

    <h2>1. Estruturas de Dados: Conceitos Fundamentais</h2>

    <h3>Defini√ß√£o Formal de Estrutura de Dados</h3>
    <p>Uma estrutura de dados √© um sistema matem√°tico organizado:</p>
    <p><strong>S = (D, O, R)</strong></p>
    <p>Onde:</p>
    <ul>
        <li><strong>D</strong> = Conjunto finito de dados armazenados</li>
        <li><strong>O</strong> = Conjunto de opera√ß√µes primitivas permitidas</li>
        <li><strong>R</strong> = Conjunto de rela√ß√µes e invariantes entre elementos</li>
    </ul>
    `
  },
  'aula03': {
    title: 'üìô Aula 03: An√°lise de Algoritmos e Pr√°tica de An√°lise',
    pdf: '/aulas/pdf/aula03.pdf',
    content: `
    <h1>Aula 03: An√°lise de Algoritmos e Pr√°tica de An√°lise</h1>
    
    <p><strong>T√≥picos Abordados:</strong></p>
    <ul>
        <li>An√°lise de complexidade de tempo e espa√ßo</li>
        <li>Nota√ß√µes assint√≥ticas (Big-O, Œ©, Œò)</li>
        <li>An√°lise de melhor, pior e caso m√©dio</li>
        <li>T√©cnicas de an√°lise pr√°tica</li>
        <li>Benchmarking e medi√ß√£o de performance</li>
    </ul>
    `
  },
  'aula04': {
    title: 'üìï Aula 04: Defini√ß√µes Recursivas e Como Implementar Recursividade',
    pdf: '/aulas/pdf/aula04.pdf',
    content: `
    <h1>Aula 04: Defini√ß√µes Recursivas e Como Implementar Recursividade</h1>
    
    <p><strong>Objetivos:</strong></p>
    <ul>
        <li>Compreender conceitos de recursividade</li>
        <li>Implementar fun√ß√µes recursivas corretamente</li>
        <li>Identificar casos base e recursivos</li>
        <li>Aplicar recurs√£o em problemas pr√°ticos</li>
    </ul>

    <h2>1. Conceitos Fundamentais</h2>

    <h3>1.1 Defini√ß√£o de Recursividade</h3>
    <p>Uma fun√ß√£o √© <strong>recursiva</strong> quando chama a si mesma para resolver uma vers√£o menor do mesmo problema.</p>
    `
  },
  'aulas05-14': {
    title: 'üìö Aulas 05-14: Conte√∫do Avan√ßado',
    content: `
    <h1>Aulas 05-14: Conte√∫do Avan√ßado</h1>
    
    <h2>üìö √çndice das Aulas</h2>
    <ul>
        <li>Aula 05: Desenvolvendo Algoritmos com Recursividade</li>
        <li>Aula 06: Quando N√£o Usar Recursividade</li>
        <li>Aula 07: An√°lise Ordena√ß√£o Elementar e Mergesort</li>
        <li>Aula 08: Quicksort e Shellsort</li>
        <li>Aulas 09-12: √Årvores e Grafos</li>
        <li>Aula 13: Roteiro de Laborat√≥rio</li>
        <li>Aula 14: Projetos Finais</li>
    </ul>
    `
  }
};

const AulaModal = ({ open, onClose, aulaId, onAulaChange }) => {
  const [currentAula, setCurrentAula] = useState(aulaId || 'aula01');
  
  const aulaKeys = Object.keys(aulasData);
  const currentIndex = aulaKeys.indexOf(currentAula);
  const aula = aulasData[currentAula];

  useEffect(() => {
    if (aulaId) {
      setCurrentAula(aulaId);
    }
  }, [aulaId]);

  const navigateAula = (direction) => {
    let newIndex;
    if (direction === 'prev' && currentIndex > 0) {
      newIndex = currentIndex - 1;
    } else if (direction === 'next' && currentIndex < aulaKeys.length - 1) {
      newIndex = currentIndex + 1;
    } else {
      return;
    }
    
    const newAulaId = aulaKeys[newIndex];
    setCurrentAula(newAulaId);
    if (onAulaChange) {
      onAulaChange(newAulaId);
    }
  };

  if (!aula) {
    return null;
  }

  return (
    <Dialog open={open} onClose={onClose} maxWidth="lg" fullWidth>
      <DialogTitle>
        <Box display="flex" justifyContent="space-between" alignItems="center">
          <Typography variant="h6">{aula.title}</Typography>
          <IconButton onClick={onClose}>
            <CloseIcon />
          </IconButton>
        </Box>
      </DialogTitle>
      
      <DialogContent>
        {/* Navigation */}
        <Paper sx={{ p: 2, mb: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Button
            startIcon={<PrevIcon />}
            onClick={() => navigateAula('prev')}
            disabled={currentIndex === 0}
            variant="outlined"
          >
            Anterior
          </Button>
          
          <Typography variant="h6" sx={{ mx: 2, textAlign: 'center' }}>
            {aula.title}
          </Typography>
          
          <Button
            endIcon={<NextIcon />}
            onClick={() => navigateAula('next')}
            disabled={currentIndex === aulaKeys.length - 1}
            variant="outlined"
          >
            Pr√≥xima
          </Button>
        </Paper>

        {/* PDF Download */}
        {aula.pdf && (
          <Paper sx={{ p: 2, mb: 2, textAlign: 'center', background: 'linear-gradient(135deg, #fd79a8 0%, #e84393 100%)', color: 'white' }}>
            <Button
              startIcon={<DownloadIcon />}
              href={aula.pdf}
              target="_blank"
              variant="contained"
              sx={{ backgroundColor: 'rgba(255, 255, 255, 0.2)', color: 'white' }}
            >
              üìÑ Download PDF Completo
            </Button>
          </Paper>
        )}

        {/* Content */}
        <Paper sx={{ p: 3 }}>
          <Box 
            dangerouslySetInnerHTML={{ __html: aula.content }}
            sx={{
              '& h1': { color: '#2c3e50', fontSize: '2rem', mb: 2 },
              '& h2': { color: '#34495e', fontSize: '1.5rem', mt: 3, mb: 2 },
              '& h3': { color: '#2980b9', fontSize: '1.3rem', mt: 2, mb: 1 },
              '& p': { mb: 2, lineHeight: 1.6 },
              '& ul, & ol': { mb: 2, pl: 3 },
              '& li': { mb: 1 },
              '& strong': { fontWeight: 600 }
            }}
          />
        </Paper>
      </DialogContent>
    </Dialog>
  );
};

export default AulaModal;