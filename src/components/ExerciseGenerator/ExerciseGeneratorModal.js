import React, { useState, useEffect, useRef } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  Box,
  Typography,
  Button,
  IconButton,
  Slider,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  Grid,
  Paper,
  Switch,
  FormControlLabel,
  TextField,
  CircularProgress,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  LinearProgress,
  Card,
  CardContent,
  Alert,
  Tooltip
} from '@mui/material';
import {
  Close as CloseIcon,
  Settings as SettingsIcon,
  Psychology as PsychologyIcon,
  AutoFixHigh as AutoFixHighIcon,
  History as HistoryIcon,
  Clear as ClearIcon,
  Download as DownloadIcon,
  ExpandMore as ExpandMoreIcon,
  PlayArrow as PlayArrowIcon,
  Refresh as RefreshIcon,
  Analytics as AnalyticsIcon,
  School as SchoolIcon,
  Quiz as QuizIcon
} from '@mui/icons-material';
import './ExerciseGeneratorModal.css';

const GEMINI_API_KEY = 'AIzaSyCRfarEDTrIlXNPdonkf-KNAU414KrGnEQ';
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';

const ExerciseGeneratorModal = ({ open, onClose }) => {
  // Estados principais
  const [exerciseConfig, setExerciseConfig] = useState({
    quantidade: 5,
    materias: ['algoritmos', 'estruturas'],
    complexidade: 'medio',
    temperatura: 0.7,
    tipoQuestao: 'multipla_escolha',
    focoConteudo: 'geral',
    evitarRepetidas: true,
    incluirExplicacoes: true,
    dificuldadeGradual: false,
    topK: 40,
    topP: 0.8
  });

  const [generatedExercises, setGeneratedExercises] = useState([]);
  const [exerciseHistory, setExerciseHistory] = useState([]);
  const [loading, setLoading] = useState(false);
  const [currentView, setCurrentView] = useState('config'); // config, exercises, analysis
  const [analysisData, setAnalysisData] = useState(null);
  const [errors, setErrors] = useState([]);

  // Refs
  const scrollRef = useRef(null);

  // Configura√ß√µes de temperatura
  const temperatureLabels = {
    0.1: { label: 'Muito Conservadora', description: 'Exerc√≠cios padr√£o e previs√≠veis' },
    0.3: { label: 'Conservadora', description: 'Exerc√≠cios bem estruturados' },
    0.5: { label: 'Equilibrada', description: 'Mix de criatividade e estrutura' },
    0.7: { label: 'Criativa', description: 'Exerc√≠cios inovadores' },
    0.9: { label: 'Muito Criativa', description: 'Exerc√≠cios √∫nicos e desafiadores' }
  };

  // Categorias de exerc√≠cios
  const categories = {
    conceitual: { 
      name: 'Conceitual', 
      color: '#3498db',
      description: 'Exerc√≠cios sobre conceitos te√≥ricos fundamentais'
    },
    comparativa: { 
      name: 'Comparativa', 
      color: '#e74c3c',
      description: 'Compara√ß√£o entre diferentes algoritmos e estruturas'
    },
    aplicativa: { 
      name: 'Aplicativa', 
      color: '#2ecc71',
      description: 'Aplica√ß√£o pr√°tica de algoritmos em problemas reais'
    },
    analitica: { 
      name: 'Anal√≠tica', 
      color: '#f39c12',
      description: 'An√°lise de complexidade e performance'
    },
    estrategica: { 
      name: 'Estrat√©gica', 
      color: '#9b59b6',
      description: 'Escolha de algoritmos e estrat√©gias de solu√ß√£o'
    }
  };

  // Carregar dados salvos
  useEffect(() => {
    const savedConfig = localStorage.getItem('exercise_generator_config');
    const savedHistory = localStorage.getItem('exercise_generator_history');
    
    if (savedConfig) {
      setExerciseConfig(JSON.parse(savedConfig));
    }
    
    if (savedHistory) {
      setExerciseHistory(JSON.parse(savedHistory));
    }
  }, []);

  // Salvar configura√ß√µes
  useEffect(() => {
    localStorage.setItem('exercise_generator_config', JSON.stringify(exerciseConfig));
  }, [exerciseConfig]);

  // Salvar hist√≥rico
  useEffect(() => {
    localStorage.setItem('exercise_generator_history', JSON.stringify(exerciseHistory));
  }, [exerciseHistory]);

  // Atualizar configura√ß√µes automaticamente baseadas na temperatura
  useEffect(() => {
    const temp = exerciseConfig.temperatura;
    setExerciseConfig(prev => ({
      ...prev,
      topK: Math.round(20 + (temp * 40)), // 20-60
      topP: Math.round((0.6 + (temp * 0.4)) * 100) / 100 // 0.6-1.0
    }));
  }, [exerciseConfig.temperatura]);

  // Fun√ß√£o para gerar prompt inteligente
  const buildIntelligentPrompt = () => {
    const { quantidade, materias, complexidade, tipoQuestao, focoConteudo, incluirExplicacoes, dificuldadeGradual } = exerciseConfig;
    
    let prompt = `Voc√™ √© um EXPERT em gera√ß√£o de exerc√≠cios educacionais para a disciplina "Algoritmos e Complexidade" (ARA0174).

üéØ CONFIGURA√á√ÉO SOLICITADA:
- Quantidade: ${quantidade} exerc√≠cios
- Mat√©rias: ${materias.join(', ')}
- Complexidade: ${complexidade}
- Tipo: ${tipoQuestao}
- Foco: ${focoConteudo}
- Dificuldade gradual: ${dificuldadeGradual ? 'SIM' : 'N√ÉO'}
- Incluir explica√ß√µes: ${incluirExplicacoes ? 'SIM' : 'N√ÉO'}

üìö CONTE√öDO ESPEC√çFICO DA DISCIPLINA:
- Algoritmos fundamentais e an√°lise de complexidade
- Estruturas de dados homog√™neas e heterog√™neas
- Recursividade e backtracking
- Algoritmos de ordena√ß√£o (Bubble, Selection, Merge, Quick, Shell)
- √Årvores bin√°rias, BST, AVL
- Grafos e algoritmos de busca (DFS, BFS)
- An√°lise de performance e otimiza√ß√£o

üéØ DISTRIBUI√á√ÉO OBRIGAT√ìRIA POR CATEGORIA:
- Conceitual: ${Math.ceil(quantidade * 0.3)} exerc√≠cios
- Aplicativa: ${Math.ceil(quantidade * 0.3)} exerc√≠cios  
- Anal√≠tica: ${Math.ceil(quantidade * 0.2)} exerc√≠cios
- Comparativa: ${Math.ceil(quantidade * 0.1)} exerc√≠cios
- Estrat√©gica: ${Math.ceil(quantidade * 0.1)} exerc√≠cios

`;

    // Adicionar hist√≥rico para evitar repeti√ß√µes
    if (exerciseConfig.evitarRepetidas && exerciseHistory.length > 0) {
      const recentExercises = exerciseHistory.slice(-20).map(ex => ex.question).join('\n- ');
      prompt += `\n‚ùå EVITAR QUEST√ïES SIMILARES A ESTAS RECENTES:\n- ${recentExercises}\n`;
    }

    // Instru√ß√µes espec√≠ficas por tipo
    if (tipoQuestao === 'multipla_escolha') {
      prompt += `\nüìù FORMATO M√öLTIPLA ESCOLHA:
- 4 alternativas (A, B, C, D)
- Apenas 1 alternativa correta
- Distratores plaus√≠veis e educativos
- Alternativas balanceadas em tamanho`;
    } else if (tipoQuestao === 'verdadeiro_falso') {
      prompt += `\nüìù FORMATO VERDADEIRO/FALSO:
- Afirma√ß√µes claras e precisas
- Evitar palavras absolutas (sempre, nunca)
- Incluir justificativa para a resposta`;
    } else {
      prompt += `\nüìù FORMATO DISSERTATIVO:
- Quest√µes abertas que exigem an√°lise
- Crit√©rios claros de avalia√ß√£o
- Possibilidade de m√∫ltiplas abordagens corretas`;
    }

    prompt += `\n\nüéØ INSTRU√á√ÉO FINAL:
Gere EXATAMENTE ${quantidade} exerc√≠cios √∫nicos, inovadores e tecnicamente precisos. 
Distribua entre as categorias especificadas.
Use o formato JSON estruturado conforme exemplo:

{
  "exercises": [
    {
      "id": "ex1",
      "type": "${tipoQuestao}",
      "category": "conceitual",
      "difficulty": "basico",
      "question": "Quest√£o espec√≠fica e t√©cnica...",
      "options": ["A) ...", "B) ...", "C) ...", "D) ..."],
      "correct_answer": "A",
      "explanation": "Explica√ß√£o detalhada...",
      "reference": "Aula 01 - Algoritmos Fundamentais",
      "complexity": "O(n)",
      "tags": ["algoritmos", "complexidade"]
    }
  ]
}

Seja CRIATIVO, T√âCNICO e EDUCATIVO. Gere exerc√≠cios que realmente testem o conhecimento profundo dos estudantes!`;

    return prompt;
  };

  // Fun√ß√£o para chamar a API Gemini
  const callGeminiAPI = async (prompt) => {
    const requestBody = {
      contents: [{
        parts: [{ text: prompt }]
      }],
      generationConfig: {
        temperature: exerciseConfig.temperatura,
        topK: exerciseConfig.topK,
        topP: exerciseConfig.topP,
        maxOutputTokens: 4000,
        candidateCount: 1
      }
    };

    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    
    if (data.candidates && data.candidates[0] && data.candidates[0].content) {
      return data.candidates[0].content.parts[0].text;
    } else {
      throw new Error('Resposta inv√°lida da API');
    }
  };

  // Fun√ß√£o para gerar exerc√≠cios
  const generateExercises = async () => {
    setLoading(true);
    setErrors([]);
    
    try {
      const prompt = buildIntelligentPrompt();
      const response = await callGeminiAPI(prompt);
      
      // Extrair JSON da resposta
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Formato JSON n√£o encontrado na resposta');
      }
      
      const exercisesData = JSON.parse(jsonMatch[0]);
      
      if (!exercisesData.exercises || !Array.isArray(exercisesData.exercises)) {
        throw new Error('Estrutura de exerc√≠cios inv√°lida');
      }

      // Adicionar metadados
      const enhancedExercises = exercisesData.exercises.map((ex, index) => ({
        ...ex,
        id: `ex_${Date.now()}_${index}`,
        generated_at: new Date().toISOString(),
        config_used: { ...exerciseConfig }
      }));

      setGeneratedExercises(enhancedExercises);
      
      // Adicionar ao hist√≥rico
      const newHistoryEntry = {
        timestamp: new Date().toISOString(),
        config: { ...exerciseConfig },
        exercises: enhancedExercises,
        count: enhancedExercises.length
      };
      
      setExerciseHistory(prev => [...prev.slice(-49), newHistoryEntry]);
      
      // Gerar an√°lise
      generateAnalysis(enhancedExercises);
      
      // Mudar para visualiza√ß√£o dos exerc√≠cios
      setCurrentView('exercises');
      
    } catch (error) {
      console.error('Erro ao gerar exerc√≠cios:', error);
      setErrors([error.message]);
    } finally {
      setLoading(false);
    }
  };

  // Fun√ß√£o para gerar an√°lise
  const generateAnalysis = (exercises) => {
    const categoryCount = {};
    const difficultyCount = {};
    const typeCount = {};
    
    exercises.forEach(ex => {
      categoryCount[ex.category] = (categoryCount[ex.category] || 0) + 1;
      difficultyCount[ex.difficulty] = (difficultyCount[ex.difficulty] || 0) + 1;
      typeCount[ex.type] = (typeCount[ex.type] || 0) + 1;
    });

    setAnalysisData({
      totalExercises: exercises.length,
      categoryDistribution: categoryCount,
      difficultyDistribution: difficultyCount,
      typeDistribution: typeCount,
      averageComplexity: exercises.length > 0 ? 'O(n log n)' : 'N/A',
      generationTime: new Date().toLocaleTimeString(),
      configUsed: { ...exerciseConfig }
    });
  };

  // Fun√ß√£o para limpar hist√≥rico
  const clearHistory = () => {
    setExerciseHistory([]);
    localStorage.removeItem('exercise_generator_history');
  };

  // Fun√ß√£o para exportar exerc√≠cios
  const exportExercises = () => {
    const dataStr = JSON.stringify(generatedExercises, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `exercicios_${Date.now()}.json`;
    link.click();
  };

  // Render da configura√ß√£o
  const renderConfiguration = () => (
    <Box className="exercise-config">
      <Typography variant="h6" gutterBottom className="config-section-title">
        üéõÔ∏è Configura√ß√µes Avan√ßadas
      </Typography>

      {/* Controle de Criatividade */}
      <Paper className="config-section" elevation={2}>
        <Typography variant="h6" gutterBottom>
          üß† Controle de Criatividade da IA
        </Typography>
        
        <Box className="temperature-container">
          <Slider
            value={exerciseConfig.temperatura}
            onChange={(e, value) => setExerciseConfig(prev => ({ ...prev, temperatura: value }))}
            min={0.1}
            max={1.0}
            step={0.1}
            marks={[
              { value: 0.1, label: 'Conservadora' },
              { value: 0.5, label: 'Equilibrada' },
              { value: 1.0, label: 'Criativa' }
            ]}
            className="temperature-slider"
          />
          
          <Box className="temp-info">
            <Typography variant="h6" className="temp-value">
              {exerciseConfig.temperatura}
            </Typography>
            <Typography variant="body2" className="temp-description">
              {temperatureLabels[exerciseConfig.temperatura]?.description || 'Configura√ß√£o personalizada'}
            </Typography>
            <Typography variant="caption" className="temp-technical">
              topK: {exerciseConfig.topK} | topP: {exerciseConfig.topP}
            </Typography>
          </Box>
        </Box>
      </Paper>

      {/* Configura√ß√µes de Conte√∫do */}
      <Paper className="config-section" elevation={2}>
        <Typography variant="h6" gutterBottom>
          üìö Configura√ß√µes de Conte√∫do
        </Typography>
        
        <Grid container spacing={3}>
          <Grid item xs={12} sm={6}>
            <TextField
              type="number"
              label="Quantidade de Exerc√≠cios"
              value={exerciseConfig.quantidade}
              onChange={(e) => setExerciseConfig(prev => ({ ...prev, quantidade: parseInt(e.target.value) }))}
              inputProps={{ min: 1, max: 20 }}
              fullWidth
            />
          </Grid>
          
          <Grid item xs={12} sm={6}>
            <FormControl fullWidth>
              <InputLabel>Complexidade</InputLabel>
              <Select
                value={exerciseConfig.complexidade}
                onChange={(e) => setExerciseConfig(prev => ({ ...prev, complexidade: e.target.value }))}
              >
                <MenuItem value="basico">B√°sico</MenuItem>
                <MenuItem value="medio">M√©dio</MenuItem>
                <MenuItem value="avancado">Avan√ßado</MenuItem>
                <MenuItem value="misto">Misto</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          
          <Grid item xs={12} sm={6}>
            <FormControl fullWidth>
              <InputLabel>Tipo de Quest√£o</InputLabel>
              <Select
                value={exerciseConfig.tipoQuestao}
                onChange={(e) => setExerciseConfig(prev => ({ ...prev, tipoQuestao: e.target.value }))}
              >
                <MenuItem value="multipla_escolha">M√∫ltipla Escolha</MenuItem>
                <MenuItem value="verdadeiro_falso">Verdadeiro/Falso</MenuItem>
                <MenuItem value="dissertativa">Dissertativa</MenuItem>
                <MenuItem value="misto">Misto</MenuItem>
              </Select>
            </FormControl>
          </Grid>
          
          <Grid item xs={12} sm={6}>
            <FormControl fullWidth>
              <InputLabel>Foco do Conte√∫do</InputLabel>
              <Select
                value={exerciseConfig.focoConteudo}
                onChange={(e) => setExerciseConfig(prev => ({ ...prev, focoConteudo: e.target.value }))}
              >
                <MenuItem value="geral">Mix Geral</MenuItem>
                <MenuItem value="conceitos">Conceitos Fundamentais</MenuItem>
                <MenuItem value="aplicacao">Aplica√ß√£o Pr√°tica</MenuItem>
                <MenuItem value="casos_praticos">Casos Pr√°ticos</MenuItem>
              </Select>
            </FormControl>
          </Grid>
        </Grid>

        {/* Mat√©rias Selecionadas */}
        <Box sx={{ mt: 2 }}>
          <Typography variant="subtitle1" gutterBottom>Se√ß√µes/Aulas:</Typography>
          <Box className="materias-chips">
            {['algoritmos', 'estruturas', 'recursividade', 'ordenacao', 'arvores', 'grafos'].map(materia => (
              <Chip
                key={materia}
                label={materia.charAt(0).toUpperCase() + materia.slice(1)}
                variant={exerciseConfig.materias.includes(materia) ? 'filled' : 'outlined'}
                onClick={() => {
                  const newMaterias = exerciseConfig.materias.includes(materia)
                    ? exerciseConfig.materias.filter(m => m !== materia)
                    : [...exerciseConfig.materias, materia];
                  setExerciseConfig(prev => ({ ...prev, materias: newMaterias }));
                }}
                className={exerciseConfig.materias.includes(materia) ? 'chip-selected' : 'chip-unselected'}
              />
            ))}
          </Box>
        </Box>
      </Paper>

      {/* Op√ß√µes Avan√ßadas */}
      <Paper className="config-section" elevation={2}>
        <Typography variant="h6" gutterBottom>
          ‚öôÔ∏è Op√ß√µes Avan√ßadas
        </Typography>
        
        <Grid container spacing={2}>
          <Grid item xs={12} sm={6}>
            <FormControlLabel
              control={
                <Switch
                  checked={exerciseConfig.evitarRepetidas}
                  onChange={(e) => setExerciseConfig(prev => ({ ...prev, evitarRepetidas: e.target.checked }))}
                />
              }
              label="Sistema Anti-Repeti√ß√£o"
            />
          </Grid>
          
          <Grid item xs={12} sm={6}>
            <FormControlLabel
              control={
                <Switch
                  checked={exerciseConfig.incluirExplicacoes}
                  onChange={(e) => setExerciseConfig(prev => ({ ...prev, incluirExplicacoes: e.target.checked }))}
                />
              }
              label="Incluir Explica√ß√µes"
            />
          </Grid>
          
          <Grid item xs={12} sm={6}>
            <FormControlLabel
              control={
                <Switch
                  checked={exerciseConfig.dificuldadeGradual}
                  onChange={(e) => setExerciseConfig(prev => ({ ...prev, dificuldadeGradual: e.target.checked }))}
                />
              }
              label="Dificuldade Gradual"
            />
          </Grid>
        </Grid>
        
        {/* Hist√≥rico */}
        <Box sx={{ mt: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Typography variant="body2">
            Hist√≥rico: {exerciseHistory.length} sess√µes salvas
          </Typography>
          <Button
            startIcon={<ClearIcon />}
            onClick={clearHistory}
            variant="outlined"
            color="warning"
            size="small"
          >
            Limpar Hist√≥rico
          </Button>
        </Box>
      </Paper>

      {/* Bot√£o de Gera√ß√£o */}
      <Box className="generate-button-container">
        <Button
          variant="contained"
          size="large"
          onClick={generateExercises}
          disabled={loading}
          className="generate-button"
          startIcon={loading ? <CircularProgress size={20} /> : <PsychologyIcon />}
        >
          {loading ? 'Gerando Exerc√≠cios Inteligentes...' : 'Gerar Exerc√≠cios com IA'}
        </Button>
      </Box>
    </Box>
  );

  // Render dos exerc√≠cios gerados
  const renderExercises = () => (
    <Box className="exercises-container">
      <Box className="exercises-header">
        <Typography variant="h6">
          üìù Exerc√≠cios Gerados ({generatedExercises.length})
        </Typography>
        <Box>
          <Button
            startIcon={<AnalyticsIcon />}
            onClick={() => setCurrentView('analysis')}
            variant="outlined"
            sx={{ mr: 1 }}
          >
            Ver An√°lise
          </Button>
          <Button
            startIcon={<DownloadIcon />}
            onClick={exportExercises}
            variant="contained"
            color="success"
          >
            Exportar
          </Button>
        </Box>
      </Box>

      <Box className="exercises-list">
        {generatedExercises.map((exercise, index) => (
          <Card key={exercise.id} className="exercise-card" elevation={2}>
            <CardContent>
              <Box className="exercise-header">
                <Box className="exercise-meta">
                  <Chip
                    label={categories[exercise.category]?.name || exercise.category}
                    sx={{
                      backgroundColor: categories[exercise.category]?.color || '#gray',
                      color: 'white',
                      mr: 1
                    }}
                    size="small"
                  />
                  <Chip
                    label={exercise.difficulty}
                    variant="outlined"
                    size="small"
                  />
                  {exercise.complexity && (
                    <Chip
                      label={exercise.complexity}
                      variant="outlined"
                      size="small"
                      sx={{ ml: 1 }}
                    />
                  )}
                </Box>
                <Typography variant="h6" className="exercise-number">
                  #{index + 1}
                </Typography>
              </Box>

              <Typography variant="body1" className="exercise-question">
                {exercise.question}
              </Typography>

              {exercise.options && (
                <Box className="exercise-options">
                  {exercise.options.map((option, optIndex) => (
                    <Typography
                      key={optIndex}
                      variant="body2"
                      className={`exercise-option ${option.startsWith(exercise.correct_answer) ? 'correct-option' : ''}`}
                    >
                      {option}
                    </Typography>
                  ))}
                </Box>
              )}

              {exercise.explanation && (
                <Accordion className="exercise-explanation">
                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                    <Typography>üìñ Explica√ß√£o</Typography>
                  </AccordionSummary>
                  <AccordionDetails>
                    <Typography variant="body2">
                      {exercise.explanation}
                    </Typography>
                  </AccordionDetails>
                </Accordion>
              )}

              {exercise.reference && (
                <Typography variant="caption" className="exercise-reference">
                  üìö Refer√™ncia: {exercise.reference}
                </Typography>
              )}
            </CardContent>
          </Card>
        ))}
      </Box>
    </Box>
  );

  // Render da an√°lise
  const renderAnalysis = () => (
    <Box className="analysis-container">
      <Typography variant="h6" gutterBottom>
        üìä An√°lise Avan√ßada dos Exerc√≠cios
      </Typography>

      {analysisData && (
        <Grid container spacing={3}>
          {/* Estat√≠sticas gerais */}
          <Grid item xs={12} md={6}>
            <Paper className="analysis-card" elevation={2}>
              <Typography variant="h6" gutterBottom>üìà Estat√≠sticas Gerais</Typography>
              <Box className="stat-item">
                <Typography>Total de Exerc√≠cios: {analysisData.totalExercises}</Typography>
                <Typography>Tempo de Gera√ß√£o: {analysisData.generationTime}</Typography>
                <Typography>Complexidade M√©dia: {analysisData.averageComplexity}</Typography>
              </Box>
            </Paper>
          </Grid>

          {/* Distribui√ß√£o por categoria */}
          <Grid item xs={12} md={6}>
            <Paper className="analysis-card" elevation={2}>
              <Typography variant="h6" gutterBottom>üéØ Distribui√ß√£o por Categoria</Typography>
              {Object.entries(analysisData.categoryDistribution).map(([category, count]) => (
                <Box key={category} className="category-analysis-item">
                  <Box className="category-info">
                    <Chip
                      label={categories[category]?.name || category}
                      sx={{
                        backgroundColor: categories[category]?.color || '#gray',
                        color: 'white',
                        mr: 1
                      }}
                      size="small"
                    />
                    <Typography>{count} exerc√≠cios</Typography>
                  </Box>
                  <LinearProgress
                    variant="determinate"
                    value={(count / analysisData.totalExercises) * 100}
                    className="category-progress"
                  />
                </Box>
              ))}
            </Paper>
          </Grid>

          {/* Configura√ß√£o utilizada */}
          <Grid item xs={12}>
            <Paper className="analysis-card" elevation={2}>
              <Typography variant="h6" gutterBottom>‚öôÔ∏è Configura√ß√£o Utilizada</Typography>
              <Grid container spacing={2}>
                <Grid item xs={6} sm={3}>
                  <Typography variant="body2">
                    <strong>Temperatura:</strong> {analysisData.configUsed.temperatura}
                  </Typography>
                </Grid>
                <Grid item xs={6} sm={3}>
                  <Typography variant="body2">
                    <strong>Tipo:</strong> {analysisData.configUsed.tipoQuestao}
                  </Typography>
                </Grid>
                <Grid item xs={6} sm={3}>
                  <Typography variant="body2">
                    <strong>Complexidade:</strong> {analysisData.configUsed.complexidade}
                  </Typography>
                </Grid>
                <Grid item xs={6} sm={3}>
                  <Typography variant="body2">
                    <strong>TopK:</strong> {analysisData.configUsed.topK}
                  </Typography>
                </Grid>
              </Grid>
            </Paper>
          </Grid>
        </Grid>
      )}

      <Box sx={{ mt: 3, textAlign: 'center' }}>
        <Button
          startIcon={<RefreshIcon />}
          onClick={() => setCurrentView('config')}
          variant="outlined"
          sx={{ mr: 2 }}
        >
          Nova Gera√ß√£o
        </Button>
        <Button
          startIcon={<QuizIcon />}
          onClick={() => setCurrentView('exercises')}
          variant="contained"
        >
          Ver Exerc√≠cios
        </Button>
      </Box>
    </Box>
  );

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="lg"
      fullWidth
      className="exercise-generator-modal"
    >
      <DialogTitle className="modal-header">
        <Box display="flex" justifyContent="space-between" alignItems="center">
          <Box display="flex" alignItems="center">
            <AutoFixHighIcon sx={{ mr: 1 }} />
            <Typography variant="h6">
              Gerador Avan√ßado de Exerc√≠cios com IA
            </Typography>
          </Box>
          <IconButton onClick={onClose} className="close-button">
            <CloseIcon />
          </IconButton>
        </Box>
        
        {/* Navega√ß√£o */}
        <Box className="view-navigation">
          <Button
            variant={currentView === 'config' ? 'contained' : 'outlined'}
            onClick={() => setCurrentView('config')}
            startIcon={<SettingsIcon />}
            className="nav-button"
          >
            Configura√ß√£o
          </Button>
          <Button
            variant={currentView === 'exercises' ? 'contained' : 'outlined'}
            onClick={() => setCurrentView('exercises')}
            startIcon={<SchoolIcon />}
            className="nav-button"
            disabled={generatedExercises.length === 0}
          >
            Exerc√≠cios ({generatedExercises.length})
          </Button>
          <Button
            variant={currentView === 'analysis' ? 'contained' : 'outlined'}
            onClick={() => setCurrentView('analysis')}
            startIcon={<AnalyticsIcon />}
            className="nav-button"
            disabled={!analysisData}
          >
            An√°lise
          </Button>
        </Box>
      </DialogTitle>

      <DialogContent className="modal-content" ref={scrollRef}>
        {/* Exibir erros */}
        {errors.length > 0 && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {errors.map((error, index) => (
              <Typography key={index}>{error}</Typography>
            ))}
          </Alert>
        )}

        {/* Conte√∫do baseado na visualiza√ß√£o atual */}
        {currentView === 'config' && renderConfiguration()}
        {currentView === 'exercises' && renderExercises()}
        {currentView === 'analysis' && renderAnalysis()}
      </DialogContent>
    </Dialog>
  );
};

export default ExerciseGeneratorModal;