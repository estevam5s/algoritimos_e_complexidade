import React, { useState, useRef, useEffect } from 'react';
import {
  Paper,
  Typography,
  TextField,
  IconButton,
  Box,
  CircularProgress,
  Chip,
  Tooltip
} from '@mui/material';
import { 
  Send as SendIcon, 
  ClearAll as ClearIcon,
  DeleteSweep as DeleteSweepIcon
} from '@mui/icons-material';
import './ChatSection.css';

// Importar dados das aulas do script.js
const aulasData = {
    'aula01': {
        title: 'üìò Aula 01: Algoritmos - Fun√ß√µes e Passagem de Par√¢metros',
        pdf: 'aulas/pdf/aula01.pdf',
        content: `
        <h1>Aula 01: Algoritmos - Fun√ß√µes e Passagem de Par√¢metros</h1>
        
        <p><strong>Disciplina:</strong> Algoritmos e Complexidade<br>
        <strong>Professor:</strong> Vagner Cordeiro<br>
        <strong>Carga Hor√°ria:</strong> 4 horas</p>

        <h2>Objetivos de Aprendizagem</h2>
        <p>Ao final desta aula, o estudante ser√° capaz de:</p>
        <ul>
            <li>Compreender conceitos fundamentais de algoritmos</li>
            <li>Dominar a cria√ß√£o e uso de fun√ß√µes</li>
            <li>Aplicar diferentes formas de passagem de par√¢metros</li>
            <li>Analisar o escopo de vari√°veis em fun√ß√µes</li>
        </ul>

        <h2>1. Conceitos Fundamentais de Algoritmos</h2>

        <h3>1.1 Defini√ß√£o de Algoritmo</h3>
        <p>Um <strong>algoritmo</strong> √© uma sequ√™ncia finita e ordenada de instru√ß√µes n√£o amb√≠guas que resolve um problema espec√≠fico ou realiza uma tarefa computacional.</p>

        <h3>1.2 Caracter√≠sticas Essenciais</h3>
        <ul>
            <li><strong>Finitude</strong>: Deve terminar ap√≥s um n√∫mero finito de passos</li>
            <li><strong>Defini√ß√£o</strong>: Cada instru√ß√£o deve ser clara e precisa</li>
            <li><strong>Entrada</strong>: Zero ou mais valores de entrada</li>
            <li><strong>Sa√≠da</strong>: Um ou mais valores de sa√≠da</li>
            <li><strong>Efetividade</strong>: Cada opera√ß√£o deve ser realiz√°vel</li>
        </ul>

        <h2>2. Fun√ß√µes em Algoritmos</h2>

        <h3>2.1 Conceito de Fun√ß√£o</h3>
        <p>Uma <strong>fun√ß√£o</strong> √© um bloco de c√≥digo que executa uma tarefa espec√≠fica e pode ser reutilizado em diferentes partes do programa.</p>

        <h3>2.2 Vantagens das Fun√ß√µes</h3>
        <ul>
            <li><strong>Modularidade</strong>: Divis√£o do problema em partes menores</li>
            <li><strong>Reutiliza√ß√£o</strong>: C√≥digo pode ser usado m√∫ltiplas vezes</li>
            <li><strong>Manutenibilidade</strong>: Facilita corre√ß√µes e melhorias</li>
            <li><strong>Legibilidade</strong>: Torna o c√≥digo mais compreens√≠vel</li>
        </ul>

        <h3>2.3 Sintaxe de Fun√ß√µes em C</h3>
        <pre><code>tipo_retorno nome_funcao(tipo_parametro1 parametro1, tipo_parametro2 parametro2) {
    // Corpo da fun√ß√£o
    return valor; // opcional para fun√ß√µes void
}</code></pre>

        <h3>2.4 Exemplo Pr√°tico</h3>
        <pre><code>#include &lt;stdio.h&gt;

// Fun√ß√£o que calcula o quadrado de um n√∫mero
int quadrado(int numero) {
    return numero * numero;
}

// Fun√ß√£o que verifica se um n√∫mero √© par
int eh_par(int numero) {
    return (numero % 2 == 0);
}

int main() {
    int valor = 5;
    printf("O quadrado de %d √© %d\\n", valor, quadrado(valor));
    printf("%d √© %s\\n", valor, eh_par(valor) ? "par" : "√≠mpar");
    return 0;
}</code></pre>

        <h2>3. Passagem de Par√¢metros</h2>

        <h3>3.1 Passagem por Valor</h3>
        <p>Na <strong>passagem por valor</strong>, uma c√≥pia do valor √© enviada para a fun√ß√£o. Mudan√ßas no par√¢metro n√£o afetam a vari√°vel original.</p>

        <pre><code>#include &lt;stdio.h&gt;

void incrementa_valor(int x) {
    x = x + 1;
    printf("Dentro da fun√ß√£o: %d\\n", x);
}

int main() {
    int numero = 10;
    printf("Antes da fun√ß√£o: %d\\n", numero);
    incrementa_valor(numero);
    printf("Depois da fun√ß√£o: %d\\n", numero);
    return 0;
}</code></pre>

        <p><strong>Sa√≠da:</strong></p>
        <pre>Antes da fun√ß√£o: 10
Dentro da fun√ß√£o: 11
Depois da fun√ß√£o: 10</pre>

        <h3>3.2 Passagem por Refer√™ncia (Ponteiros)</h3>
        <p>Na <strong>passagem por refer√™ncia</strong>, o endere√ßo da vari√°vel √© enviado. Mudan√ßas no par√¢metro afetam a vari√°vel original.</p>

        <pre><code>#include &lt;stdio.h&gt;

void incrementa_referencia(int *x) {
    *x = *x + 1;
    printf("Dentro da fun√ß√£o: %d\\n", *x);
}

int main() {
    int numero = 10;
    printf("Antes da fun√ß√£o: %d\\n", numero);
    incrementa_referencia(&numero);
    printf("Depois da fun√ß√£o: %d\\n", numero);
    return 0;
}</code></pre>

        <p><strong>Sa√≠da:</strong></p>
        <pre>Antes da fun√ß√£o: 10
Dentro da fun√ß√£o: 11
Depois da fun√ß√£o: 11</pre>

        <div class="pdf-download-grid" style="margin-top: 30px;">
            <a href="aulas/pdf/aula01.pdf" class="pdf-download-item" target="_blank">üìÑ Download PDF Completo</a>
        </div>
        `
    },
    'aula02': {
        title: 'üìó Aula 02: Estruturas de Dados - Homog√™neas, Heterog√™neas e Ponteiros',
        pdf: 'aulas/pdf/aula02.pdf',
        content: `
        <h1>Aula 02: Estruturas de Dados - Homog√™neas, Heterog√™neas e Ponteiros</h1>
        
        <p><strong>Disciplina:</strong> Algoritmos e Complexidade<br>
        <strong>Professor:</strong> Vagner Cordeiro<br>
        <strong>Carga Hor√°ria:</strong> 4 horas</p>

        <h2>Objetivos de Aprendizagem</h2>
        <ul>
            <li>Compreender estruturas de dados homog√™neas e heterog√™neas</li>
            <li>Dominar conceitos avan√ßados de ponteiros</li>
            <li>Implementar arrays e matrizes eficientemente</li>
            <li>Aplicar structs para organiza√ß√£o de dados complexos</li>
        </ul>

        <h2>1. Estruturas de Dados: Conceitos Fundamentais</h2>

        <h3>Defini√ß√£o Formal de Estrutura de Dados</h3>
        <p>Uma estrutura de dados √© um sistema matem√°tico organizado:</p>
        <p><strong>S = (D, O, R)</strong></p>
        <p>Onde:</p>
        <ul>
            <li><strong>D</strong> = Conjunto finito de dados armazenados</li>
            <li><strong>O</strong> = Conjunto de opera√ß√µes primitivas permitidas</li>
            <li><strong>R</strong> = Conjunto de rela√ß√µes e invariantes entre elementos</li>
        </ul>

        <h3>Taxonomia Fundamental</h3>
        <p><strong>Por Homogeneidade:</strong></p>
        <ul>
            <li><strong>Homog√™neas</strong>: Todos elementos do mesmo tipo</li>
            <li><strong>Heterog√™neas</strong>: Elementos de tipos diferentes</li>
        </ul>

        <p><strong>Por Organiza√ß√£o:</strong></p>
        <ul>
            <li><strong>Lineares</strong>: Sequ√™ncia ordenada</li>
            <li><strong>N√£o-lineares</strong>: Estruturas hier√°rquicas</li>
        </ul>

        <h2>2. Arrays (Vetores) - Estruturas Homog√™neas</h2>

        <h3>Defini√ß√£o Matem√°tica</h3>
        <p>Um array √© uma fun√ß√£o que mapeia √≠ndices para valores:</p>
        <p><strong>A: {0, 1, 2, ..., n-1} ‚Üí T</strong></p>

        <h3>Caracter√≠sticas Computacionais</h3>
        <ul>
            <li><strong>Acesso Aleat√≥rio</strong>: O(1) constante</li>
            <li><strong>Localidade Espacial</strong>: Elementos cont√≠guos</li>
            <li><strong>Efici√™ncia de Cache</strong>: Alta taxa de hits</li>
        </ul>

        <h3>Declara√ß√£o e Inicializa√ß√£o</h3>
        <pre><code>// Diferentes m√©todos de inicializa√ß√£o
int array_basico[5];                    // N√£o inicializado
int array_inicializado[5] = {1,2,3,4,5}; // Completa
int array_parcial[5] = {1,2};           // Parcial: {1,2,0,0,0}
int array_zero[5] = {0};                // Todos zeros
int array_automatico[] = {1,2,3,4,5};   // Tamanho inferido</code></pre>

        <h2>3. Ponteiros: Conceitos Avan√ßados</h2>

        <h3>Defini√ß√£o Formal</h3>
        <p>Um ponteiro √© uma abstra√ß√£o para endere√ßamento indireto:</p>
        <p><strong>ptr: Endere√ßo ‚Üí Valor</strong></p>

        <h3>Aritm√©tica de Ponteiros</h3>
        <pre><code>int array[5] = {10, 20, 30, 40, 50};
int *p = array;  // p aponta para array[0]

// Navega√ß√£o por aritm√©tica
printf("p[0] = %d\\n", *p);        // 10
printf("p[1] = %d\\n", *(p+1));    // 20  
printf("p[2] = %d\\n", *(p+2));    // 30</code></pre>

        <h2>4. Estruturas Heterog√™neas (Structs)</h2>

        <h3>Defini√ß√£o e Uso</h3>
        <pre><code>// Defini√ß√£o da estrutura
struct Ponto {
    double x;
    double y;
    double z;
};

// Diferentes formas de declara√ß√£o
struct Ponto p1;
struct Ponto p2 = {1.0, 2.0, 3.0};

// Usando typedef
typedef struct {
    double x, y, z;
} Ponto3D;</code></pre>

        <h3>Acesso aos Membros</h3>
        <pre><code>// Acesso direto
p1.x = 10.5;
p1.y = 20.3;

// Acesso via ponteiro
Ponto3D *ptr = &origem;
ptr->x = 15.0;  // Equivale a (*ptr).x = 15.0
ptr->y = 25.0;</code></pre>

        <h2>5. Matrizes e Arrays Bidimensionais</h2>

        <h3>Endere√ßamento</h3>
        <p><strong>Row-major order (C):</strong></p>
        <p>endereco(M[i][j]) = base + (i √ó n + j) √ó sizeof(T)</p>

        <h3>Implementa√ß√£o</h3>
        <pre><code>// Declara√ß√£o de matrizes
int matriz_fixa[3][4];
int matriz_inicializada[2][3] = {{1,2,3}, {4,5,6}};

// Opera√ß√µes matriciais
void adicionar_matrizes(int A[][4], int B[][4], int C[][4], 
                       int linhas, int colunas) {
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            C[i][j] = A[i][j] + B[i][j];
        }
    }
}</code></pre>

        <div class="pdf-download-grid" style="margin-top: 30px;">
            <a href="aulas/pdf/aula02.pdf" class="pdf-download-item" target="_blank">üìÑ Download PDF Completo</a>
        </div>
        `
    },
    'aula03': {
        title: 'üìô Aula 03: An√°lise de Algoritmos e Pr√°tica de An√°lise',
        pdf: 'aulas/pdf/aula03.pdf',
        content: `
        <h1>Aula 03: An√°lise de Algoritmos e Pr√°tica de An√°lise</h1>
        
        <p><em>Conte√∫do detalhado da Aula 03 n√£o est√° dispon√≠vel no arquivo markdown. Consulte o PDF para conte√∫do completo.</em></p>

        <h2>T√≥picos Abordados</h2>
        <ul>
            <li>An√°lise de complexidade de tempo e espa√ßo</li>
            <li>Nota√ß√µes assint√≥ticas (Big-O, Œ©, Œò)</li>
            <li>An√°lise de melhor, pior e caso m√©dio</li>
            <li>T√©cnicas de an√°lise pr√°tica</li>
            <li>Benchmarking e medi√ß√£o de performance</li>
        </ul>

        <div class="pdf-download-grid" style="margin-top: 30px;">
            <a href="aulas/pdf/aula03.pdf" class="pdf-download-item" target="_blank">üìÑ Download PDF Completo</a>
        </div>
        `
    },
    'aula04': {
        title: 'üìï Aula 04: Defini√ß√µes Recursivas e Como Implementar Recursividade',
        pdf: 'aulas/pdf/aula04.pdf',
        content: `
        <h1>Aula 04: Defini√ß√µes Recursivas e Como Implementar Recursividade</h1>
        
        <p><strong>Disciplina:</strong> Algoritmos e Complexidade<br>
        <strong>Professor:</strong> Vagner Cordeiro<br>
        <strong>Carga Hor√°ria:</strong> 4 horas</p>

        <h2>Objetivos</h2>
        <ul>
            <li>Compreender conceitos de recursividade</li>
            <li>Implementar fun√ß√µes recursivas corretamente</li>
            <li>Identificar casos base e recursivos</li>
            <li>Aplicar recurs√£o em problemas pr√°ticos</li>
        </ul>

        <h2>1. Conceitos Fundamentais</h2>

        <h3>1.1 Defini√ß√£o de Recursividade</h3>
        <p>Uma fun√ß√£o √© <strong>recursiva</strong> quando chama a si mesma para resolver uma vers√£o menor do mesmo problema.</p>

        <h3>1.2 Componentes Essenciais</h3>
        <ul>
            <li><strong>Caso base:</strong> Condi√ß√£o de parada</li>
            <li><strong>Caso recursivo:</strong> Chamada da fun√ß√£o para problema menor</li>
            <li><strong>Converg√™ncia:</strong> Garantia de que chegar√° ao caso base</li>
        </ul>

        <h2>2. Exemplos Matem√°ticos</h2>

        <h3>2.1 Fatorial</h3>
        <pre><code>int fatorial(int n) {
    if (n <= 1) {           // Caso base
        return 1;
    }
    return n * fatorial(n-1); // Caso recursivo
}</code></pre>

        <h3>2.2 Fibonacci</h3>
        <pre><code>int fibonacci(int n) {
    if (n <= 1) {           // Caso base
        return n;
    }
    return fibonacci(n-1) + fibonacci(n-2); // Caso recursivo
}</code></pre>

        <h3>2.3 Pot√™ncia</h3>
        <pre><code>int potencia(int base, int exp) {
    if (exp == 0) {         // Caso base
        return 1;
    }
    return base * potencia(base, exp-1); // Caso recursivo
}</code></pre>

        <h2>3. Recurs√£o com Arrays</h2>

        <h3>3.1 Soma de Array</h3>
        <pre><code>int soma_array(int arr[], int n) {
    if (n <= 0) {           // Caso base
        return 0;
    }
    return arr[n-1] + soma_array(arr, n-1); // Caso recursivo
}</code></pre>

        <h3>3.2 Busca em Array</h3>
        <pre><code>int busca_recursiva(int arr[], int n, int x) {
    if (n <= 0) {           // Caso base - n√£o encontrado
        return -1;
    }
    if (arr[n-1] == x) {    // Caso base - encontrado
        return n-1;
    }
    return busca_recursiva(arr, n-1, x); // Caso recursivo
}</code></pre>

        <h2>4. Recurs√£o com Strings</h2>

        <h3>4.1 Invers√£o de String</h3>
        <pre><code>void inverte_string(char str[], int inicio, int fim) {
    if (inicio >= fim) {    // Caso base
        return;
    }
    // Troca caracteres
    char temp = str[inicio];
    str[inicio] = str[fim];
    str[fim] = temp;
    
    inverte_string(str, inicio+1, fim-1); // Caso recursivo
}</code></pre>

        <h3>4.2 Pal√≠ndromo</h3>
        <pre><code>int eh_palindromo(char str[], int inicio, int fim) {
    if (inicio >= fim) {    // Caso base
        return 1;           // √â pal√≠ndromo
    }
    if (str[inicio] != str[fim]) { // Caracteres diferentes
        return 0;           // N√£o √© pal√≠ndromo
    }
    return eh_palindromo(str, inicio+1, fim-1); // Caso recursivo
}</code></pre>

        <h2>5. Problemas Cl√°ssicos</h2>

        <h3>5.1 Torres de Han√≥i</h3>
        <pre><code>void hanoi(int n, char origem, char destino, char auxiliar) {
    if (n == 1) {           // Caso base
        printf("Mover disco de %c para %c\\n", origem, destino);
        return;
    }
    // Mover n-1 discos para auxiliar
    hanoi(n-1, origem, auxiliar, destino);
    
    // Mover disco maior para destino
    printf("Mover disco de %c para %c\\n", origem, destino);
    
    // Mover n-1 discos do auxiliar para destino
    hanoi(n-1, auxiliar, destino, origem);
}</code></pre>

        <h3>5.2 M√°ximo Divisor Comum (MDC)</h3>
        <pre><code>int mdc(int a, int b) {
    if (b == 0) {           // Caso base
        return a;
    }
    return mdc(b, a % b);   // Caso recursivo
}</code></pre>

        <h2>6. Exerc√≠cios Pr√°ticos</h2>
        <ol>
            <li>Implemente soma dos d√≠gitos de um n√∫mero</li>
            <li>Calcule o n-√©simo termo da sequ√™ncia de Fibonacci</li>
            <li>Verifique se uma string √© pal√≠ndromo</li>
            <li>Implemente busca bin√°ria recursiva</li>
            <li>Calcule a pot√™ncia usando recurs√£o otimizada</li>
        </ol>

        <div class="pdf-download-grid" style="margin-top: 30px;">
            <a href="aulas/pdf/aula04.pdf" class="pdf-download-item" target="_blank">üìÑ Download PDF Completo</a>
        </div>
        `
    },
    'aulas05-14': {
        title: 'üìö Aulas 05-14: Conte√∫do Avan√ßado',
        content: `
        <h1>Aulas 05-14: Conte√∫do Avan√ßado</h1>
        
        <div class="content-toc">
            <h4>üìö √çndice das Aulas</h4>
            <ul>
                <li><a href="#aula05">Aula 05: Desenvolvendo Algoritmos com Recursividade</a></li>
                <li><a href="#aula06">Aula 06: Quando N√£o Usar Recursividade</a></li>
                <li><a href="#aula07">Aula 07: An√°lise Ordena√ß√£o Elementar e Mergesort</a></li>
                <li><a href="#aula08">Aula 08: Quicksort e Shellsort</a></li>
                <li><a href="#aula09-12">Aulas 09-12: √Årvores e Grafos</a></li>
                <li><a href="#aula13">Aula 13: Roteiro de Laborat√≥rio</a></li>
                <li><a href="#aula14">Aula 14: Projetos Finais</a></li>
            </ul>
        </div>

        <h2 id="aula05">Aula 05: Desenvolvendo Algoritmos com Recursividade</h2>
        <p><strong>Objetivos:</strong> Aplicar recursividade em problemas complexos, implementar backtracking e desenvolver solu√ß√µes recursivas para permuta√ß√µes.</p>

        <h3>1. Backtracking</h3>
        <p><strong>Backtracking</strong> √© uma t√©cnica algor√≠tmica que considera buscar toda solu√ß√£o poss√≠vel para um problema computacional, incrementalmente abandonando candidatos quando determinado que n√£o pode produzir uma solu√ß√£o v√°lida.</p>

        <h3>2. Problema das N-Rainhas</h3>
        <pre><code>bool eh_seguro(int tabuleiro[][8], int linha, int coluna, int n) {
    // Verifica coluna
    for (int i = 0; i < linha; i++) {
        if (tabuleiro[i][coluna] == 1) {
            return false;
        }
    }
    
    // Verifica diagonais
    for (int i = linha - 1, j = coluna - 1; i >= 0 && j >= 0; i--, j--) {
        if (tabuleiro[i][j] == 1) {
            return false;
        }
    }
    
    return true;
}</code></pre>

        <h2 id="aula06">Aula 06: Quando N√£o Usar Recursividade</h2>
        <p><strong>Objetivos:</strong> Identificar limita√ß√µes da recursividade e reconhecer quando a itera√ß√£o √© mais apropriada.</p>

        <h3>1. Limita√ß√µes da Recursividade</h3>
        <ul>
            <li><strong>Stack Overflow:</strong> Cada chamada recursiva consome espa√ßo na pilha</li>
            <li><strong>Complexidade Exponencial:</strong> Algumas recurs√µes geram complexidade desnecess√°ria</li>
            <li><strong>Consumo de Mem√≥ria:</strong> Uso excessivo da pilha de execu√ß√£o</li>
        </ul>

        <h3>2. Fibonacci: Problema Cl√°ssico</h3>
        <pre><code>// ‚ùå RUIM: Recurs√£o ineficiente
int fibonacci_ruim(int n) {
    if (n <= 1) return n;
    return fibonacci_ruim(n-1) + fibonacci_ruim(n-2);
}

// ‚úÖ BOM: Vers√£o iterativa eficiente
int fibonacci_bom(int n) {
    if (n <= 1) return n;
    
    int a = 0, b = 1, temp;
    for (int i = 2; i <= n; i++) {
        temp = a + b;
        a = b;
        b = temp;
    }
    return b;
}</code></pre>

        <h2 id="aula07">Aula 07: An√°lise Ordena√ß√£o Elementar e Mergesort</h2>
        <p><strong>Objetivos:</strong> Compreender algoritmos de ordena√ß√£o elementares e dominar o Merge Sort.</p>

        <h3>Algoritmos de Ordena√ß√£o Elementares</h3>

        <h4>1. Bubble Sort</h4>
        <pre><code>void bubble_sort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}</code></pre>
        <p><strong>Complexidade:</strong> O(n¬≤) - Melhor caso: O(n) com otimiza√ß√£o</p>

        <h4>2. Selection Sort</h4>
        <pre><code>void selection_sort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        int min_idx = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        if (min_idx != i) {
            int temp = arr[min_idx];
            arr[min_idx] = arr[i];
            arr[i] = temp;
        }
    }
}</code></pre>
        <p><strong>Complexidade:</strong> O(n¬≤) - Sempre faz O(n) trocas</p>

        <h4>3. Merge Sort</h4>
        <pre><code>void merge_sort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;
        
        merge_sort(arr, left, mid);
        merge_sort(arr, mid + 1, right);
        
        merge(arr, left, mid, right);
    }
}</code></pre>
        <p><strong>Complexidade:</strong> O(n log n) - Todos os casos</p>

        <h2 id="aula08">Aula 08: Quicksort e Shellsort</h2>
        <p><strong>Objetivos:</strong> Dominar o Quick Sort e compreender o Shell Sort.</p>

        <h3>Quick Sort</h3>
        <pre><code>void quick_sort(int arr[], int baixo, int alto) {
    if (baixo < alto) {
        int pi = particionar(arr, baixo, alto);
        
        quick_sort(arr, baixo, pi - 1);
        quick_sort(arr, pi + 1, alto);
    }
}</code></pre>
        <p><strong>An√°lise:</strong></p>
        <ul>
            <li><strong>Melhor Caso:</strong> O(n log n)</li>
            <li><strong>Pior Caso:</strong> O(n¬≤)</li>
            <li><strong>Caso M√©dio:</strong> O(n log n)</li>
        </ul>

        <h2 id="aula09-12">Aulas 09-12: √Årvores e Grafos</h2>

        <h3>Aula 09: √Årvore Bin√°ria de Busca</h3>
        <p><strong>Objetivos:</strong> Compreender conceitos de √°rvores bin√°rias e implementar BST.</p>

        <pre><code>typedef struct No {
    int data;
    struct No *esquerda, *direita;
} No;

No* inserir(No *raiz, int data) {
    if (raiz == NULL) return criar_no(data);
    
    if (data < raiz->data)
        raiz->esquerda = inserir(raiz->esquerda, data);
    else if (data > raiz->data)
        raiz->direita = inserir(raiz->direita, data);
    
    return raiz;
}</code></pre>

        <h3>Aula 10: Percurso em √Årvores Bin√°rias</h3>
        <p><strong>Tipos de Percurso:</strong></p>
        <ul>
            <li><strong>Em Ordem (In-order):</strong> Esquerda ‚Üí Raiz ‚Üí Direita</li>
            <li><strong>Pr√©-ordem (Pre-order):</strong> Raiz ‚Üí Esquerda ‚Üí Direita</li>
            <li><strong>P√≥s-ordem (Post-order):</strong> Esquerda ‚Üí Direita ‚Üí Raiz</li>
            <li><strong>Por N√≠vel (Level-order):</strong> Usando fila</li>
        </ul>

        <h3>Aula 11: Balanceamento de √Årvore e √Årvore AVL</h3>
        <p><strong>Conceitos:</strong></p>
        <ul>
            <li><strong>Fator de Balanceamento:</strong> altura(direita) - altura(esquerda)</li>
            <li><strong>√Årvore AVL:</strong> |fator de balanceamento| ‚â§ 1</li>
            <li><strong>Rota√ß√µes:</strong> Simples e duplas</li>
        </ul>

        <h3>Aula 12: Grafos - Conceitos e Representa√ß√£o</h3>
        <p><strong>Defini√ß√µes:</strong></p>
        <ul>
            <li><strong>Grafo:</strong> G = (V, E) onde V s√£o v√©rtices e E s√£o arestas</li>
            <li><strong>Representa√ß√µes:</strong> Matriz de adjac√™ncia e Lista de adjac√™ncia</li>
            <li><strong>Algoritmos:</strong> DFS e BFS</li>
        </ul>

        <h2 id="aula13">Aula 13: Roteiro de Laborat√≥rio</h2>
        <p><strong>Objetivos:</strong> Aplicar conceitos te√≥ricos em implementa√ß√µes pr√°ticas.</p>

        <h3>Laborat√≥rios Principais:</h3>
        <ul>
            <li><strong>Lab 1:</strong> Implementa√ß√£o e An√°lise de Algoritmos de Ordena√ß√£o</li>
            <li><strong>Lab 2:</strong> √Årvore Bin√°ria de Busca Completa</li>
            <li><strong>Lab 3:</strong> Sistema de Grafos com Algoritmos</li>
            <li><strong>Lab 4:</strong> Projeto Integrador - Sistema de Gerenciamento</li>
        </ul>

        <h2 id="aula14">Aula 14: Projetos Finais</h2>
        <p><strong>Objetivos:</strong> Aplicar conhecimentos em projetos pr√°ticos complexos.</p>

        <h3>Estrutura dos Projetos:</h3>
        <ul>
            <li><strong>Dura√ß√£o:</strong> 15-20 minutos por equipe</li>
            <li><strong>Composi√ß√£o:</strong> 2-3 alunos por equipe</li>
            <li><strong>Demonstra√ß√£o:</strong> Sistema funcionando + c√≥digo + an√°lise</li>
            <li><strong>Documenta√ß√£o:</strong> Relat√≥rio t√©cnico completo</li>
        </ul>

        <h3>Projetos Dispon√≠veis:</h3>
        <ol>
            <li><strong>Sistema de Roteamento de Rede</strong></li>
            <li><strong>Sistema de Gerenciamento de Banco de Dados Simples</strong></li>
            <li><strong>Compilador para Linguagem Simples</strong></li>
            <li><strong>Sistema de Recomenda√ß√£o Inteligente</strong></li>
            <li><strong>Simulador de Sistema Operacional</strong></li>
            <li><strong>Engine de Jogos 2D com IA</strong></li>
        </ol>

        <div class="pdf-download-grid" style="margin-top: 30px;">
            <a href="aulas/pdf/aulas09-12.pdf" class="pdf-download-item" target="_blank">üìÑ Aulas 09-12 PDF</a>
            <a href="aulas/pdf/aula13.pdf" class="pdf-download-item" target="_blank">üìÑ Aula 13 PDF</a>
            <a href="aulas/pdf/aula14.pdf" class="pdf-download-item" target="_blank">üìÑ Download PDF Completo</a>
        </div>
        `
    }
};

const GEMINI_API_KEY = 'AIzaSyCRfarEDTrIlXNPdonkf-KNAU414KrGnEQ';
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';

// Fun√ß√£o para converter HTML em texto plano para a IA
const htmlToText = (html) => {
  return html
    .replace(/<[^>]*>/g, ' ')
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&amp;/g, '&')
    .replace(/\s+/g, ' ')
    .trim();
};

// Gerar contexto detalhado das aulas
const generateDetailedContext = () => {
  let detailedContent = '';
  Object.entries(aulasData).forEach(([aulaId, aula]) => {
    detailedContent += `\n=== ${aula.title} ===\n`;
    detailedContent += htmlToText(aula.content);
    detailedContent += '\n\n';
  });
  return detailedContent;
};

const COURSE_CONTEXT = `
Voc√™ √© um assistente virtual ALTAMENTE ESPECIALIZADO na disciplina "Algoritmos e Complexidade" (ARA0174) do curso de Sistemas de Informa√ß√£o, ministrada pelo Prof. Vagner Cordeiro.

üéØ PAPEL E EXPERTISE:
Voc√™ √© um expert em algoritmos, estruturas de dados, an√°lise de complexidade e programa√ß√£o em C e Python. Voc√™ tem acesso completo a todo o conte√∫do das aulas da disciplina e pode explicar conceitos detalhadamente, resolver exerc√≠cios, criar exemplos pr√°ticos e ajudar com implementa√ß√µes.

üìö INFORMA√á√ïES DA DISCIPLINA:
- C√≥digo: ARA0174 - Algoritmos e Complexidade
- Carga Hor√°ria: 80 horas (4 horas/semana)
- Per√≠odo: 2025.2
- Professor: Vagner Cordeiro
- Curso: Sistemas de Informa√ß√£o

üóìÔ∏è EMENTA DETALHADA:
Unidade I (16h): Fundamentos e Fun√ß√µes
- Conceitos b√°sicos de algoritmos e suas caracter√≠sticas essenciais
- Fun√ß√µes: cria√ß√£o, uso, vantagens (modularidade, reutiliza√ß√£o, manutenibilidade)
- Passagem de par√¢metros: por valor vs por refer√™ncia (ponteiros)
- Estruturas homog√™neas (arrays) e heterog√™neas (structs)
- Ponteiros: defini√ß√£o formal, aritm√©tica, endere√ßamento indireto
- An√°lise de complexidade introdut√≥ria

Unidade II (16h): Recursividade
- Defini√ß√µes recursivas e componentes essenciais
- Casos base, casos recursivos, garantia de converg√™ncia
- Implementa√ß√£o de algoritmos recursivos cl√°ssicos
- Limita√ß√µes: stack overflow, complexidade exponencial
- Quando usar recurs√£o vs itera√ß√£o
- Backtracking e algoritmos avan√ßados

Unidade III (16h): Algoritmos de Ordena√ß√£o
- Algoritmos elementares: Bubble Sort O(n¬≤), Selection Sort O(n¬≤), Insertion Sort
- Algoritmos eficientes: Merge Sort O(n log n), Quick Sort (melhor O(n log n), pior O(n¬≤))
- Shell Sort e suas caracter√≠sticas
- An√°lise comparativa de complexidades
- Implementa√ß√µes pr√°ticas e otimiza√ß√µes

Unidade IV (16h): Estruturas Avan√ßadas
- √Årvores bin√°rias de busca (BST): conceitos, implementa√ß√£o, opera√ß√µes
- Percursos: em ordem, pr√©-ordem, p√≥s-ordem, por n√≠vel
- √Årvores AVL: balanceamento, fatores, rota√ß√µes simples e duplas
- Grafos: defini√ß√µes G = (V, E), representa√ß√µes (matriz/lista adjac√™ncia)
- Algoritmos fundamentais: DFS, BFS

Unidade V (16h): Projetos e Laborat√≥rio
- Laborat√≥rios pr√°ticos com implementa√ß√µes completas
- Projetos integradores: sistemas complexos
- An√°lise de performance e benchmarks
- Documenta√ß√£o t√©cnica

üìñ CONTE√öDO DETALHADO DAS AULAS:
${generateDetailedContext()}

üìù EXERC√çCIOS E AVALIA√á√ïES:
Listas de Exerc√≠cios:
- Lista 01: An√°lise de Complexidade (2,0 pontos, prazo 25/08/2025)
- Lista 02: Estruturas de Dados B√°sicas (2,5 pontos, prazo 08/09/2025)
- Lista 03: Algoritmos Recursivos (2,0 pontos, prazo 22/09/2025)
- Lista 04: Algoritmos de Ordena√ß√£o (3,0 pontos, prazo 06/10/2025)

Sistema de Avalia√ß√£o:
- Prova 1: 25% (Fundamentos, fun√ß√µes, an√°lise de complexidade)
- Prova 2: 25% (Estruturas de dados, ponteiros, recursividade)
- Prova 3: 25% (Algoritmos de ordena√ß√£o, √°rvores, grafos)
- Exerc√≠cios: 15% (Listas pr√°ticas com implementa√ß√µes)
- Projeto Final: 10% (Sistema completo demonstrando todos os conceitos)

üíª LINGUAGENS E FERRAMENTAS:
- Linguagem C: Implementa√ß√µes de baixo n√≠vel, controle de mem√≥ria, ponteiros
- Python: Prototipagem r√°pida, an√°lise de dados, compara√ß√µes
- Compiladores: GCC para C, Python 3.8+ 
- Ferramentas: Git, debuggers, profilers de performance

‚è∞ CRONOGRAMA DETALHADO:
- Semanas 1-4: Fundamentos (Aulas 01-04) - Base te√≥rica s√≥lida
- Semanas 5-8: Recursividade (Aulas 05-06) + Prova 1
- Semanas 9-12: Algoritmos de Ordena√ß√£o (Aulas 07-08) + An√°lise pr√°tica
- Semanas 13-16: Estruturas Avan√ßadas (Aulas 09-12) + Prova 2
- Semanas 17-20: Laborat√≥rio e Projetos (Aulas 13-14) + Prova 3

üéì METODOLOGIA PEDAG√ìGICA:
- Abordagem rigorosa com fundamenta√ß√£o matem√°tica
- Teoria sempre acompanhada de implementa√ß√µes pr√°ticas
- An√°lise comparativa com benchmarks e medi√ß√µes reais
- Desenvolvimento incremental de complexidade
- Foco na compreens√£o profunda dos conceitos

ü§ñ DIRETRIZES PARA RESPOSTA:
1. Seja ALTAMENTE T√âCNICO e PRECISO
2. Use exemplos de c√≥digo em C e Python quando relevante
3. Explique a complexidade algor√≠tmica (Big-O, Omega, Theta)
4. Relacione conceitos com o conte√∫do espec√≠fico das aulas
5. Ofere√ßa m√∫ltiplas perspectivas (te√≥rica, pr√°tica, comparativa)
6. Use emojis relevantes para melhor engajamento
7. Sugira exerc√≠cios pr√°ticos quando apropriado
8. Referencie as aulas espec√≠ficas quando aplic√°vel
9. Seja did√°tico mas mantenha rigor acad√™mico
10. Ajude com debugging e otimiza√ß√£o de c√≥digo

Voc√™ tem conhecimento COMPLETO de todo o material da disciplina e pode ajudar desde conceitos b√°sicos at√© implementa√ß√µes avan√ßadas. Seja proativo em sugerir melhorias e extens√µes dos t√≥picos discutidos.
`;

const ChatSection = () => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const [chatHistory, setChatHistory] = useState([]);
  const messagesEndRef = useRef(null);

  const suggestions = [
    'üéØ Explique Big-O, Omega e Theta com exemplos pr√°ticos',
    'üîÑ Implemente fatorial recursivo vs iterativo em C e Python',
    '‚ö° Compare Merge Sort O(n log n) vs Quick Sort - quando usar cada um?',
    'üå≥ Como implementar uma BST com inser√ß√£o, busca e remo√ß√£o?',
    'üìù Resolva exerc√≠cio: encontrar complexidade de loops aninhados',
    'üöÄ Quando usar ponteiros vs refer√™ncias? Mostre exemplos',
    'üîç Implemente busca bin√°ria recursiva e iterativa',
    '‚öñÔ∏è Fibonacci recursivo √© O(2^n) - mostre a vers√£o O(n)',
    'üèóÔ∏è Crie um array din√¢mico completo com realloc em C',
    'üìä An√°lise de complexidade: melhor caso, pior caso, caso m√©dio',
    'üé≠ Backtracking: problema das N-Rainhas passo a passo',
    'üå≤ Percursos em √°rvores: in-order, pre-order, post-order',
    'üî¢ Torres de Han√≥i: an√°lise matem√°tica e implementa√ß√£o',
    'üìà √Årvores AVL: rota√ß√µes simples e duplas com exemplos',
    'üó∫Ô∏è Grafos: DFS vs BFS - implementa√ß√£o e aplica√ß√µes'
  ];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Fun√ß√£o para limpar o chat completamente
  const clearChat = () => {
    setMessages([]);
    setChatHistory([]);
    // Adicionar mensagem de confirma√ß√£o
    setTimeout(() => {
      const clearMessage = { 
        text: 'Chat limpo! üßπ Hist√≥rico de contexto tamb√©m foi removido. Voc√™ pode come√ßar uma nova conversa.', 
        sender: 'assistant', 
        timestamp: new Date(),
        formatted: '‚ú® <strong>Chat limpo!</strong> üßπ Hist√≥rico de contexto tamb√©m foi removido. Voc√™ pode come√ßar uma nova conversa.'
      };
      setMessages([clearMessage]);
    }, 300);
  };

  // Fun√ß√£o para limpar apenas as mensagens vis√≠veis (manter hist√≥rico para contexto)
  const clearMessages = () => {
    setMessages([]);
    // Adicionar mensagem de confirma√ß√£o
    setTimeout(() => {
      const clearMessage = { 
        text: 'Mensagens removidas! üßπ O hist√≥rico de contexto foi mantido para continuidade da conversa.', 
        sender: 'assistant', 
        timestamp: new Date(),
        formatted: '‚ú® <strong>Mensagens removidas!</strong> üßπ O hist√≥rico de contexto foi mantido para continuidade da conversa.'
      };
      setMessages([clearMessage]);
    }, 300);
  };

  // Fun√ß√£o para detectar t√≥picos na pergunta do usu√°rio
  const detectTopics = (message) => {
    const topics = [];
    const messageLower = message.toLowerCase();
    
    // Detectar t√≥picos espec√≠ficos para adicionar contexto relevante
    if (messageLower.includes('complexidade') || messageLower.includes('big-o') || 
        messageLower.includes('an√°lise') || messageLower.includes('nota√ß√£o')) {
      topics.push('complexidade');
    }
    if (messageLower.includes('recursiv') || messageLower.includes('fatorial') || 
        messageLower.includes('fibonacci') || messageLower.includes('hanoi')) {
      topics.push('recursividade');
    }
    if (messageLower.includes('sort') || messageLower.includes('ordena√ß√£o') || 
        messageLower.includes('bubble') || messageLower.includes('quick') || 
        messageLower.includes('merge')) {
      topics.push('ordenacao');
    }
    if (messageLower.includes('√°rvore') || messageLower.includes('bst') || 
        messageLower.includes('avl') || messageLower.includes('percurso')) {
      topics.push('arvores');
    }
    if (messageLower.includes('grafo') || messageLower.includes('dfs') || 
        messageLower.includes('bfs') || messageLower.includes('dijkstra')) {
      topics.push('grafos');
    }
    if (messageLower.includes('ponteiro') || messageLower.includes('array') || 
        messageLower.includes('struct') || messageLower.includes('malloc')) {
      topics.push('estruturas');
    }
    
    return topics;
  };

  const callGeminiAPI = async (message) => {
    // Detectar t√≥picos relevantes
    const detectedTopics = detectTopics(message);
    
    // Construir contexto inteligente baseado nos t√≥picos
    let enhancedContext = COURSE_CONTEXT;
    
    // Adicionar contexto espec√≠fico baseado nos t√≥picos detectados
    if (detectedTopics.includes('complexidade')) {
      enhancedContext += `\n\nüîç FOCO ESPECIAL EM AN√ÅLISE DE COMPLEXIDADE:
      - Big-O (limite superior): O(f(n)) - pior caso
      - Omega (limite inferior): Œ©(f(n)) - melhor caso  
      - Theta (limite exato): Œò(f(n)) - todos os casos
      - Regras: somar loops sequenciais, multiplicar loops aninhados
      - Complexidades comuns: O(1), O(log n), O(n), O(n log n), O(n¬≤), O(2^n), O(n!)`;
    }
    
    if (detectedTopics.includes('recursividade')) {
      enhancedContext += `\n\nüîÑ FOCO ESPECIAL EM RECURSIVIDADE:
      - Componentes: caso base, caso recursivo, converg√™ncia
      - Evitar: stack overflow, complexidade exponencial desnecess√°ria
      - Torres de Han√≥i: 2^n - 1 movimentos, T(n) = 2*T(n-1) + 1
      - Fibonacci iterativo: O(n) vs recursivo: O(2^n)
      - Backtracking: tentativa e erro com retrocesso inteligente`;
    }
    
    let contextWithHistory = enhancedContext + "\n\nüìù HIST√ìRICO DA CONVERSA:\n";
    chatHistory.slice(-8).forEach(item => {
      contextWithHistory += `${item.role === 'user' ? 'üë§ USU√ÅRIO' : 'ü§ñ ASSISTENTE'}: ${item.content}\n`;
    });
    contextWithHistory += `\nüë§ USU√ÅRIO: ${message}\nü§ñ ASSISTENTE:`;

    const requestBody = {
      contents: [{
        parts: [{
          text: contextWithHistory
        }]
      }],
      generationConfig: {
        temperature: 0.3, // Mais determin√≠stico para respostas t√©cnicas
        topK: 40,
        topP: 0.8,
        maxOutputTokens: 3000, // Mais tokens para respostas detalhadas
        candidateCount: 1,
        stopSequences: []
      }
    };

    const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();
    
    if (data.candidates && data.candidates[0] && data.candidates[0].content) {
      const aiResponse = data.candidates[0].content.parts[0].text;
      
      // Atualizar hist√≥rico
      setChatHistory(prev => [
        ...prev.slice(-18), // Manter √∫ltimas 18 mensagens
        { role: 'user', content: message },
        { role: 'assistant', content: aiResponse }
      ]);
      
      return aiResponse;
    } else {
      throw new Error('Resposta inv√°lida da API');
    }
  };

  const formatMessage = (content) => {
    return content
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/`(.*?)`/g, '<code style="background: #f1f5f9; padding: 2px 6px; border-radius: 4px; font-family: monospace; color: #e83e8c;">$1</code>')
      .replace(/\n/g, '<br>')
      .replace(/```(\w+)?\n?([\s\S]*?)```/g, (match, lang, code) => {
        return `<pre style="background: #2d3748; color: #e2e8f0; padding: 15px; border-radius: 8px; overflow-x: auto; margin: 10px 0;"><code>${code.trim()}</code></pre>`;
      });
  };

  const sendMessage = async (text = input) => {
    if (!text.trim()) return;

    const userMessage = { 
      text, 
      sender: 'user', 
      timestamp: new Date(),
      formatted: text
    };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setLoading(true);

    try {
      const response = await callGeminiAPI(text);
      const assistantMessage = { 
        text: response, 
        sender: 'assistant', 
        timestamp: new Date(),
        formatted: formatMessage(response)
      };
      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error('Erro ao chamar API:', error);
      const errorMessage = { 
        text: 'Desculpe, ocorreu um erro. Tente novamente mais tarde.', 
        sender: 'assistant', 
        timestamp: new Date(),
        formatted: 'Desculpe, ocorreu um erro. Tente novamente mais tarde.'
      };
      setMessages(prev => [...prev, errorMessage]);
    }

    setLoading(false);
  };

  const handleKeyDown = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
    // Atalho: Ctrl+L ou Cmd+L para limpar chat
    if ((e.ctrlKey || e.metaKey) && e.key === 'l') {
      e.preventDefault();
      clearMessages();
    }
    // Atalho: Ctrl+Shift+L ou Cmd+Shift+L para limpar tudo
    if ((e.ctrlKey || e.metaKey) && e.shiftKey && e.key === 'L') {
      e.preventDefault();
      clearChat();
    }
  };

  return (
    <Paper className="content-section" elevation={3}>
      <Typography variant="h4" className="section-title">
        ü§ñ IA Assistant - Algoritmos e Complexidade
      </Typography>

      <Paper sx={{ 
        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', 
        color: 'white', 
        p: 3, 
        mb: 3, 
        borderRadius: '15px' 
      }}>
        <Typography variant="h6" gutterBottom>
          ü§ñ Assistente IA Especializado - Algoritmos e Complexidade
        </Typography>
        <Typography variant="body1" gutterBottom>
          Sou seu expert virtual na disciplina <strong>ARA0174</strong> com Professor Vagner Cordeiro. 
          Tenho conhecimento completo de todas as aulas e posso ajudar com:
        </Typography>
        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mt: 2 }}>
          {[
            'üéØ An√°lise de Complexidade (Big-O, Œ©, Œò)',
            'üîÑ Algoritmos Recursivos & Backtracking',
            '‚ö° Algoritmos de Ordena√ß√£o (Merge, Quick, etc)',
            'üå≥ √Årvores Bin√°rias & AVL',
            'üó∫Ô∏è Grafos (DFS, BFS)',
            'üíª Implementa√ß√µes em C e Python',
            'üìù Resolu√ß√£o de Exerc√≠cios',
            'üèóÔ∏è Estruturas de Dados Avan√ßadas'
          ].map((skill, idx) => (
            <Chip 
              key={idx} 
              label={skill} 
              size="small" 
              sx={{ 
                background: 'rgba(255,255,255,0.2)', 
                color: 'white',
                fontSize: '0.7rem'
              }} 
            />
          ))}
        </Box>
      </Paper>

      <Box sx={{ height: '600px', display: 'flex', flexDirection: 'column' }}>
        {/* Header com bot√µes de controle */}
        {messages.length > 0 && (
          <Box sx={{ 
            display: 'flex', 
            justifyContent: 'space-between', 
            alignItems: 'center',
            mb: 2,
            p: 2,
            background: 'rgba(255, 255, 255, 0.05)',
            borderRadius: '10px'
          }}>
            <Typography variant="body2" sx={{ color: '#666', fontWeight: 500 }}>
              üí¨ {messages.length} mensagem{messages.length !== 1 ? 's' : ''} na conversa
            </Typography>
            <Box sx={{ display: 'flex', gap: 1 }}>
              <Tooltip title="Limpar mensagens vis√≠veis (manter contexto)">
                <IconButton 
                  onClick={clearMessages}
                  size="small"
                  sx={{
                    background: 'rgba(255, 193, 7, 0.1)',
                    color: '#ff9800',
                    '&:hover': {
                      background: 'rgba(255, 193, 7, 0.2)',
                      transform: 'scale(1.05)'
                    }
                  }}
                >
                  <ClearIcon fontSize="small" />
                </IconButton>
              </Tooltip>
              <Tooltip title="Limpar tudo (mensagens + hist√≥rico de contexto)">
                <IconButton 
                  onClick={clearChat}
                  size="small"
                  sx={{
                    background: 'rgba(244, 67, 54, 0.1)',
                    color: '#f44336',
                    '&:hover': {
                      background: 'rgba(244, 67, 54, 0.2)',
                      transform: 'scale(1.05)'
                    }
                  }}
                >
                  <DeleteSweepIcon fontSize="small" />
                </IconButton>
              </Tooltip>
            </Box>
          </Box>
        )}
        
        <Box sx={{ 
          flex: 1, 
          overflowY: 'auto', 
          padding: '20px', 
          background: 'rgba(255, 255, 255, 0.05)',
          borderRadius: '15px',
          mb: 2
        }}>
          {messages.length === 0 && (
            <Box sx={{ textAlign: 'center', mb: 3 }}>
              <Typography variant="h6" gutterBottom sx={{ color: '#667eea', fontWeight: 'bold' }}>
                üöÄ Perguntas Inteligentes para Come√ßar
              </Typography>
              <Typography variant="body2" sx={{ mb: 3, color: '#666' }}>
                Clique em qualquer pergunta abaixo para obter explica√ß√µes detalhadas com exemplos de c√≥digo:
              </Typography>
              <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', gap: 2 }}>
                {suggestions.map((suggestion, index) => (
                  <Chip
                    key={index}
                    label={suggestion}
                    onClick={() => sendMessage(suggestion)}
                    sx={{
                      background: 'linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1))',
                      color: '#667eea',
                      cursor: 'pointer',
                      transition: 'all 0.4s ease',
                      padding: '12px 16px',
                      height: 'auto',
                      fontSize: '0.85rem',
                      fontWeight: '500',
                      border: '1px solid rgba(102, 126, 234, 0.2)',
                      '&:hover': {
                        background: 'linear-gradient(135deg, #667eea, #764ba2)',
                        color: 'white',
                        transform: 'translateY(-3px) scale(1.02)',
                        boxShadow: '0 8px 25px rgba(102, 126, 234, 0.3)'
                      }
                    }}
                  />
                ))}
              </Box>
              <Typography variant="caption" sx={{ display: 'block', mt: 2, color: '#999', fontStyle: 'italic' }}>
                üí° Dica: Fa√ßa perguntas espec√≠ficas para obter respostas mais detalhadas e exemplos pr√°ticos!
              </Typography>
            </Box>
          )}
          
          {messages.map((message, index) => (
            <Box
              key={index}
              sx={{
                display: 'flex',
                marginBottom: '15px',
                alignItems: 'flex-start',
                flexDirection: message.sender === 'user' ? 'row-reverse' : 'row'
              }}
            >
              <Box sx={{
                width: '40px',
                height: '40px',
                borderRadius: '50%',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                fontSize: '1.2rem',
                margin: '0 10px',
                flexShrink: 0,
                background: message.sender === 'user' 
                  ? 'linear-gradient(135deg, #74b9ff 0%, #0984e3 100%)'
                  : 'linear-gradient(135deg, #00b894 0%, #00cec9 100%)',
                color: 'white'
              }}>
                {message.sender === 'user' ? 'üë§' : 'ü§ñ'}
              </Box>
              <Paper sx={{
                maxWidth: '70%',
                padding: '15px 20px',
                borderRadius: '20px',
                position: 'relative',
                lineHeight: 1.5,
                background: message.sender === 'user'
                  ? 'linear-gradient(135deg, #74b9ff 0%, #0984e3 100%)'
                  : 'white',
                color: message.sender === 'user' ? 'white' : '#2c3e50',
                borderBottomRightRadius: message.sender === 'user' ? '5px' : '20px',
                borderBottomLeftRadius: message.sender === 'assistant' ? '5px' : '20px',
                boxShadow: message.sender === 'assistant' ? '0 2px 10px rgba(0, 0, 0, 0.1)' : 'none'
              }}>
                <Typography 
                  component="div"
                  dangerouslySetInnerHTML={{ __html: message.formatted || message.text }} 
                />
                <Typography variant="caption" sx={{ 
                  opacity: 0.7,
                  marginTop: '5px',
                  display: 'block'
                }}>
                  {message.timestamp.toLocaleTimeString()}
                </Typography>
              </Paper>
            </Box>
          ))}
          
          {loading && (
            <Box sx={{
              display: 'flex',
              alignItems: 'center',
              gap: '10px',
              padding: '15px 20px',
              background: 'white',
              borderRadius: '20px',
              borderBottomLeftRadius: '5px',
              marginLeft: '50px',
              marginBottom: '15px',
              boxShadow: '0 2px 10px rgba(0, 0, 0, 0.1)'
            }}>
              <CircularProgress size={20} />
              <Typography variant="body2">Pensando... ü§î</Typography>
            </Box>
          )}
          
          <div ref={messagesEndRef} />
        </Box>
        
        <Box sx={{ 
          display: 'flex', 
          gap: '10px', 
          alignItems: 'flex-end',
          paddingTop: '20px',
          borderTop: '1px solid #e2e8f0'
        }}>
          <TextField
            fullWidth
            multiline
            maxRows={4}
            placeholder="Digite sua pergunta sobre algoritmos, estruturas de dados, exerc√≠cios..."
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={handleKeyDown}
            disabled={loading}
            sx={{
              '& .MuiOutlinedInput-root': {
                borderRadius: '25px',
                '&:hover fieldset': {
                  borderColor: '#667eea',
                },
                '&.Mui-focused fieldset': {
                  borderColor: '#667eea',
                },
              },
            }}
          />
          <IconButton 
            onClick={() => sendMessage()} 
            disabled={loading || !input.trim()}
            sx={{
              width: 50,
              height: 50,
              ml: 1,
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              color: 'white',
              '&:hover': {
                background: 'linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%)',
                transform: 'scale(1.05)',
              },
              '&:disabled': {
                opacity: 0.5,
                transform: 'none',
              }
            }}
          >
            <SendIcon />
          </IconButton>
        </Box>

        {/* Atalhos de teclado */}
        <Box sx={{ 
          display: 'flex', 
          justifyContent: 'center', 
          mt: 1,
          gap: 2
        }}>
          <Typography variant="caption" sx={{ color: '#999', fontSize: '0.7rem' }}>
            ‚å®Ô∏è <strong>Enter:</strong> Enviar | <strong>Shift+Enter:</strong> Nova linha
          </Typography>
          <Typography variant="caption" sx={{ color: '#999', fontSize: '0.7rem' }}>
            üßπ <strong>Ctrl+L:</strong> Limpar chat | <strong>Ctrl+Shift+L:</strong> Limpar tudo
          </Typography>
        </Box>
      </Box>
    </Paper>
  );
};

export default ChatSection;