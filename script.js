const aulasData = {
    'aula01': {
        title: 'üìò Aula 01: Algoritmos - Fun√ß√µes e Passagem de Par√¢metros',
        pdf: 'aulas/pdf/aula01.pdf',
        content: `
        <h1>Aula 01: Algoritmos - Fun√ß√µes e Passagem de Par√¢metros</h1>
        
        <p><strong>Disciplina:</strong> Algoritmos e Complexidade<br>
        <strong>Professor:</strong> Vagner Cordeiro<br>
        <strong>Carga Hor√°ria:</strong> 4 horas</p>

        <h2>Objetivos de Aprendizagem</h2>
        <p>Ao final desta aula, o estudante ser√° capaz de:</p>
        <ul>
            <li>Compreender conceitos fundamentais de algoritmos</li>
            <li>Dominar a cria√ß√£o e uso de fun√ß√µes</li>
            <li>Aplicar diferentes formas de passagem de par√¢metros</li>
            <li>Analisar o escopo de vari√°veis em fun√ß√µes</li>
        </ul>

        <h2>1. Conceitos Fundamentais de Algoritmos</h2>

        <h3>1.1 Defini√ß√£o de Algoritmo</h3>
        <p>Um <strong>algoritmo</strong> √© uma sequ√™ncia finita e ordenada de instru√ß√µes n√£o amb√≠guas que resolve um problema espec√≠fico ou realiza uma tarefa computacional.</p>

        <h3>1.2 Caracter√≠sticas Essenciais</h3>
        <ul>
            <li><strong>Finitude</strong>: Deve terminar ap√≥s um n√∫mero finito de passos</li>
            <li><strong>Defini√ß√£o</strong>: Cada instru√ß√£o deve ser clara e precisa</li>
            <li><strong>Entrada</strong>: Zero ou mais valores de entrada</li>
            <li><strong>Sa√≠da</strong>: Um ou mais valores de sa√≠da</li>
            <li><strong>Efetividade</strong>: Cada opera√ß√£o deve ser realiz√°vel</li>
        </ul>

        <h2>2. Fun√ß√µes em Algoritmos</h2>

        <h3>2.1 Conceito de Fun√ß√£o</h3>
        <p>Uma <strong>fun√ß√£o</strong> √© um bloco de c√≥digo que executa uma tarefa espec√≠fica e pode ser reutilizado em diferentes partes do programa.</p>

        <h3>2.2 Vantagens das Fun√ß√µes</h3>
        <ul>
            <li><strong>Modularidade</strong>: Divis√£o do problema em partes menores</li>
            <li><strong>Reutiliza√ß√£o</strong>: C√≥digo pode ser usado m√∫ltiplas vezes</li>
            <li><strong>Manutenibilidade</strong>: Facilita corre√ß√µes e melhorias</li>
            <li><strong>Legibilidade</strong>: Torna o c√≥digo mais compreens√≠vel</li>
        </ul>

        <h3>2.3 Sintaxe de Fun√ß√µes em C</h3>
        <pre><code>tipo_retorno nome_funcao(tipo_parametro1 parametro1, tipo_parametro2 parametro2) {
// Corpo da fun√ß√£o
return valor; // opcional para fun√ß√µes void
}</code></pre>

        <h3>2.4 Exemplo Pr√°tico</h3>
        <pre><code>#include &lt;stdio.h&gt;

// Fun√ß√£o que calcula o quadrado de um n√∫mero
int quadrado(int numero) {
return numero * numero;
}

// Fun√ß√£o que verifica se um n√∫mero √© par
int eh_par(int numero) {
return (numero % 2 == 0);
}

int main() {
int valor = 5;
printf("O quadrado de %d √© %d\\n", valor, quadrado(valor));
printf("%d √© %s\\n", valor, eh_par(valor) ? "par" : "√≠mpar");
return 0;
}</code></pre>

        <h2>3. Passagem de Par√¢metros</h2>

        <h3>3.1 Passagem por Valor</h3>
        <p>Na <strong>passagem por valor</strong>, uma c√≥pia do valor √© enviada para a fun√ß√£o. Mudan√ßas no par√¢metro n√£o afetam a vari√°vel original.</p>

        <pre><code>#include &lt;stdio.h&gt;

void incrementa_valor(int x) {
x = x + 1;
printf("Dentro da fun√ß√£o: %d\\n", x);
}

int main() {
int numero = 10;
printf("Antes da fun√ß√£o: %d\\n", numero);
incrementa_valor(numero);
printf("Depois da fun√ß√£o: %d\\n", numero);
return 0;
}</code></pre>

        <p><strong>Sa√≠da:</strong></p>
        <pre>Antes da fun√ß√£o: 10
Dentro da fun√ß√£o: 11
Depois da fun√ß√£o: 10</pre>

        <h3>3.2 Passagem por Refer√™ncia (Ponteiros)</h3>
        <p>Na <strong>passagem por refer√™ncia</strong>, o endere√ßo da vari√°vel √© enviado. Mudan√ßas no par√¢metro afetam a vari√°vel original.</p>

        <pre><code>#include &lt;stdio.h&gt;

void incrementa_referencia(int *x) {
*x = *x + 1;
printf("Dentro da fun√ß√£o: %d\\n", *x);
}

int main() {
int numero = 10;
printf("Antes da fun√ß√£o: %d\\n", numero);
incrementa_referencia(&numero);
printf("Depois da fun√ß√£o: %d\\n", numero);
return 0;
}</code></pre>

        <p><strong>Sa√≠da:</strong></p>
        <pre>Antes da fun√ß√£o: 10
Dentro da fun√ß√£o: 11
Depois da fun√ß√£o: 11</pre>

        <div class="pdf-download-grid" style="margin-top: 30px;">
            <a href="aulas/pdf/aula01.pdf" class="pdf-download-item" target="_blank">üìÑ Download PDF Completo</a>
        </div>
        `
    },
    'aula02': {
        title: 'üìó Aula 02: Estruturas de Dados - Homog√™neas, Heterog√™neas e Ponteiros',
        pdf: 'aulas/pdf/aula02.pdf',
        content: `
        <h1>Aula 02: Estruturas de Dados - Homog√™neas, Heterog√™neas e Ponteiros</h1>
        
        <p><strong>Disciplina:</strong> Algoritmos e Complexidade<br>
        <strong>Professor:</strong> Vagner Cordeiro<br>
        <strong>Carga Hor√°ria:</strong> 4 horas</p>

        <h2>Objetivos de Aprendizagem</h2>
        <ul>
            <li>Compreender estruturas de dados homog√™neas e heterog√™neas</li>
            <li>Dominar conceitos avan√ßados de ponteiros</li>
            <li>Implementar arrays e matrizes eficientemente</li>
            <li>Aplicar structs para organiza√ß√£o de dados complexos</li>
        </ul>

        <h2>1. Estruturas de Dados: Conceitos Fundamentais</h2>

        <h3>Defini√ß√£o Formal de Estrutura de Dados</h3>
        <p>Uma estrutura de dados √© um sistema matem√°tico organizado:</p>
        <p><strong>S = (D, O, R)</strong></p>
        <p>Onde:</p>
        <ul>
            <li><strong>D</strong> = Conjunto finito de dados armazenados</li>
            <li><strong>O</strong> = Conjunto de opera√ß√µes primitivas permitidas</li>
            <li><strong>R</strong> = Conjunto de rela√ß√µes e invariantes entre elementos</li>
        </ul>

        <h3>Taxonomia Fundamental</h3>
        <p><strong>Por Homogeneidade:</strong></p>
        <ul>
            <li><strong>Homog√™neas</strong>: Todos elementos do mesmo tipo</li>
            <li><strong>Heterog√™neas</strong>: Elementos de tipos diferentes</li>
        </ul>

        <p><strong>Por Organiza√ß√£o:</strong></p>
        <ul>
            <li><strong>Lineares</strong>: Sequ√™ncia ordenada</li>
            <li><strong>N√£o-lineares</strong>: Estruturas hier√°rquicas</li>
        </ul>

        <h2>2. Arrays (Vetores) - Estruturas Homog√™neas</h2>

        <h3>Defini√ß√£o Matem√°tica</h3>
        <p>Um array √© uma fun√ß√£o que mapeia √≠ndices para valores:</p>
        <p><strong>A: {0, 1, 2, ..., n-1} ‚Üí T</strong></p>

        <h3>Caracter√≠sticas Computacionais</h3>
        <ul>
            <li><strong>Acesso Aleat√≥rio</strong>: O(1) constante</li>
            <li><strong>Localidade Espacial</strong>: Elementos cont√≠guos</li>
            <li><strong>Efici√™ncia de Cache</strong>: Alta taxa de hits</li>
        </ul>

        <h3>Declara√ß√£o e Inicializa√ß√£o</h3>
        <pre><code>// Diferentes m√©todos de inicializa√ß√£o
int array_basico[5];                    // N√£o inicializado
int array_inicializado[5] = {1,2,3,4,5}; // Completa
int array_parcial[5] = {1,2};           // Parcial: {1,2,0,0,0}
int array_zero[5] = {0};                // Todos zeros
int array_automatico[] = {1,2,3,4,5};   // Tamanho inferido</code></pre>

        <h2>3. Ponteiros: Conceitos Avan√ßados</h2>

        <h3>Defini√ß√£o Formal</h3>
        <p>Um ponteiro √© uma abstra√ß√£o para endere√ßamento indireto:</p>
        <p><strong>ptr: Endere√ßo ‚Üí Valor</strong></p>

        <h3>Aritm√©tica de Ponteiros</h3>
        <pre><code>int array[5] = {10, 20, 30, 40, 50};
int *p = array;  // p aponta para array[0]

// Navega√ß√£o por aritm√©tica
printf("p[0] = %d\\n", *p);        // 10
printf("p[1] = %d\\n", *(p+1));    // 20  
printf("p[2] = %d\\n", *(p+2));    // 30</code></pre>

        <h2>4. Estruturas Heterog√™neas (Structs)</h2>

        <h3>Defini√ß√£o e Uso</h3>
        <pre><code>// Defini√ß√£o da estrutura
struct Ponto {
double x;
double y;
double z;
};

// Diferentes formas de declara√ß√£o
struct Ponto p1;
struct Ponto p2 = {1.0, 2.0, 3.0};

// Usando typedef
typedef struct {
double x, y, z;
} Ponto3D;</code></pre>

        <h3>Acesso aos Membros</h3>
        <pre><code>// Acesso direto
p1.x = 10.5;
p1.y = 20.3;

// Acesso via ponteiro
Ponto3D *ptr = &origem;
ptr->x = 15.0;  // Equivale a (*ptr).x = 15.0
ptr->y = 25.0;</code></pre>

        <h2>5. Matrizes e Arrays Bidimensionais</h2>

        <h3>Endere√ßamento</h3>
        <p><strong>Row-major order (C):</strong></p>
        <p>endereco(M[i][j]) = base + (i √ó n + j) √ó sizeof(T)</p>

        <h3>Implementa√ß√£o</h3>
        <pre><code>// Declara√ß√£o de matrizes
int matriz_fixa[3][4];
int matriz_inicializada[2][3] = {{1,2,3}, {4,5,6}};

// Opera√ß√µes matriciais
void adicionar_matrizes(int A[][4], int B[][4], int C[][4], 
                int linhas, int colunas) {
for (int i = 0; i < linhas; i++) {
for (int j = 0; j < colunas; j++) {
    C[i][j] = A[i][j] + B[i][j];
}
}
}</code></pre>

        <div class="pdf-download-grid" style="margin-top: 30px;">
            <a href="aulas/pdf/aula02.pdf" class="pdf-download-item" target="_blank">üìÑ Download PDF Completo</a>
        </div>
        `
    },
    'aula03': {
        title: 'üìô Aula 03: An√°lise de Algoritmos e Pr√°tica de An√°lise',
        pdf: 'aulas/pdf/aula03.pdf',
        content: `
        <h1>Aula 03: An√°lise de Algoritmos e Pr√°tica de An√°lise</h1>
        
        <p><em>Conte√∫do detalhado da Aula 03 n√£o est√° dispon√≠vel no arquivo markdown. Consulte o PDF para conte√∫do completo.</em></p>

        <h2>T√≥picos Abordados</h2>
        <ul>
            <li>An√°lise de complexidade de tempo e espa√ßo</li>
            <li>Nota√ß√µes assint√≥ticas (Big-O, Œ©, Œò)</li>
            <li>An√°lise de melhor, pior e caso m√©dio</li>
            <li>T√©cnicas de an√°lise pr√°tica</li>
            <li>Benchmarking e medi√ß√£o de performance</li>
        </ul>

        <div class="pdf-download-grid" style="margin-top: 30px;">
            <a href="aulas/pdf/aula03.pdf" class="pdf-download-item" target="_blank">üìÑ Download PDF Completo</a>
        </div>
        `
    },
    'aula04': {
        title: 'üìï Aula 04: Defini√ß√µes Recursivas e Como Implementar Recursividade',
        pdf: 'aulas/pdf/aula04.pdf',
        content: `
        <h1>Aula 04: Defini√ß√µes Recursivas e Como Implementar Recursividade</h1>
        
        <p><strong>Disciplina:</strong> Algoritmos e Complexidade<br>
        <strong>Professor:</strong> Vagner Cordeiro<br>
        <strong>Carga Hor√°ria:</strong> 4 horas</p>

        <h2>Objetivos</h2>
        <ul>
            <li>Compreender conceitos de recursividade</li>
            <li>Implementar fun√ß√µes recursivas corretamente</li>
            <li>Identificar casos base e recursivos</li>
            <li>Aplicar recurs√£o em problemas pr√°ticos</li>
        </ul>

        <h2>1. Conceitos Fundamentais</h2>

        <h3>1.1 Defini√ß√£o de Recursividade</h3>
        <p>Uma fun√ß√£o √© <strong>recursiva</strong> quando chama a si mesma para resolver uma vers√£o menor do mesmo problema.</p>

        <h3>1.2 Componentes Essenciais</h3>
        <ul>
            <li><strong>Caso base:</strong> Condi√ß√£o de parada</li>
            <li><strong>Caso recursivo:</strong> Chamada da fun√ß√£o para problema menor</li>
            <li><strong>Converg√™ncia:</strong> Garantia de que chegar√° ao caso base</li>
        </ul>

        <h2>2. Exemplos Matem√°ticos</h2>

        <h3>2.1 Fatorial</h3>
        <pre><code>int fatorial(int n) {
if (n <= 1) {           // Caso base
return 1;
}
return n * fatorial(n-1); // Caso recursivo
}</code></pre>

        <h3>2.2 Fibonacci</h3>
        <pre><code>int fibonacci(int n) {
if (n <= 1) {           // Caso base
return n;
}
return fibonacci(n-1) + fibonacci(n-2); // Caso recursivo
}</code></pre>

        <h3>2.3 Pot√™ncia</h3>
        <pre><code>int potencia(int base, int exp) {
if (exp == 0) {         // Caso base
return 1;
}
return base * potencia(base, exp-1); // Caso recursivo
}</code></pre>

        <h2>3. Recurs√£o com Arrays</h2>

        <h3>3.1 Soma de Array</h3>
        <pre><code>int soma_array(int arr[], int n) {
if (n <= 0) {           // Caso base
return 0;
}
return arr[n-1] + soma_array(arr, n-1); // Caso recursivo
}</code></pre>

        <h3>3.2 Busca em Array</h3>
        <pre><code>int busca_recursiva(int arr[], int n, int x) {
if (n <= 0) {           // Caso base - n√£o encontrado
return -1;
}
if (arr[n-1] == x) {    // Caso base - encontrado
return n-1;
}
return busca_recursiva(arr, n-1, x); // Caso recursivo
}</code></pre>

        <h2>4. Recurs√£o com Strings</h2>

        <h3>4.1 Invers√£o de String</h3>
        <pre><code>void inverte_string(char str[], int inicio, int fim) {
if (inicio >= fim) {    // Caso base
return;
}
// Troca caracteres
char temp = str[inicio];
str[inicio] = str[fim];
str[fim] = temp;

inverte_string(str, inicio+1, fim-1); // Caso recursivo
}</code></pre>

        <h3>4.2 Pal√≠ndromo</h3>
        <pre><code>int eh_palindromo(char str[], int inicio, int fim) {
if (inicio >= fim) {    // Caso base
return 1;           // √â pal√≠ndromo
}
if (str[inicio] != str[fim]) { // Caracteres diferentes
return 0;           // N√£o √© pal√≠ndromo
}
return eh_palindromo(str, inicio+1, fim-1); // Caso recursivo
}</code></pre>

        <h2>5. Problemas Cl√°ssicos</h2>

        <h3>5.1 Torres de Han√≥i</h3>
        <pre><code>void hanoi(int n, char origem, char destino, char auxiliar) {
if (n == 1) {           // Caso base
printf("Mover disco de %c para %c\\n", origem, destino);
return;
}
// Mover n-1 discos para auxiliar
hanoi(n-1, origem, auxiliar, destino);

// Mover disco maior para destino
printf("Mover disco de %c para %c\\n", origem, destino);

// Mover n-1 discos do auxiliar para destino
hanoi(n-1, auxiliar, destino, origem);
}</code></pre>

        <h3>5.2 M√°ximo Divisor Comum (MDC)</h3>
        <pre><code>int mdc(int a, int b) {
if (b == 0) {           // Caso base
return a;
}
return mdc(b, a % b);   // Caso recursivo
}</code></pre>

        <h2>6. Exerc√≠cios Pr√°ticos</h2>
        <ol>
            <li>Implemente soma dos d√≠gitos de um n√∫mero</li>
            <li>Calcule o n-√©simo termo da sequ√™ncia de Fibonacci</li>
            <li>Verifique se uma string √© pal√≠ndromo</li>
            <li>Implemente busca bin√°ria recursiva</li>
            <li>Calcule a pot√™ncia usando recurs√£o otimizada</li>
        </ol>

        <div class="pdf-download-grid" style="margin-top: 30px;">
            <a href="aulas/pdf/aula04.pdf" class="pdf-download-item" target="_blank">üìÑ Download PDF Completo</a>
        </div>
        `
    },
    'aulas05-14': {
        title: 'üìö Aulas 05-14: Conte√∫do Avan√ßado',
        content: `
        <h1>Aulas 05-14: Conte√∫do Avan√ßado</h1>
        
        <div class="content-toc">
            <h4>üìö √çndice das Aulas</h4>
            <ul>
                <li><a href="#aula05">Aula 05: Desenvolvendo Algoritmos com Recursividade</a></li>
                <li><a href="#aula06">Aula 06: Quando N√£o Usar Recursividade</a></li>
                <li><a href="#aula07">Aula 07: An√°lise Ordena√ß√£o Elementar e Mergesort</a></li>
                <li><a href="#aula08">Aula 08: Quicksort e Shellsort</a></li>
                <li><a href="#aula09-12">Aulas 09-12: √Årvores e Grafos</a></li>
                <li><a href="#aula13">Aula 13: Roteiro de Laborat√≥rio</a></li>
                <li><a href="#aula14">Aula 14: Projetos Finais</a></li>
            </ul>
        </div>

        <h2 id="aula05">Aula 05: Desenvolvendo Algoritmos com Recursividade</h2>
        <p><strong>Objetivos:</strong> Aplicar recursividade em problemas complexos, implementar backtracking e desenvolver solu√ß√µes recursivas para permuta√ß√µes.</p>

        <h3>1. Backtracking</h3>
        <p><strong>Backtracking</strong> √© uma t√©cnica algor√≠tmica que considera buscar toda solu√ß√£o poss√≠vel para um problema computacional, incrementalmente abandonando candidatos quando determinado que n√£o pode produzir uma solu√ß√£o v√°lida.</p>

        <h3>2. Problema das N-Rainhas</h3>
        <pre><code>bool eh_seguro(int tabuleiro[][8], int linha, int coluna, int n) {
// Verifica coluna
for (int i = 0; i < linha; i++) {
if (tabuleiro[i][coluna] == 1) {
    return false;
}
}

// Verifica diagonais
for (int i = linha - 1, j = coluna - 1; i >= 0 && j >= 0; i--, j--) {
if (tabuleiro[i][j] == 1) {
    return false;
}
}

return true;
}</code></pre>

        <h2 id="aula06">Aula 06: Quando N√£o Usar Recursividade</h2>
        <p><strong>Objetivos:</strong> Identificar limita√ß√µes da recursividade e reconhecer quando a itera√ß√£o √© mais apropriada.</p>

        <h3>1. Limita√ß√µes da Recursividade</h3>
        <ul>
            <li><strong>Stack Overflow:</strong> Cada chamada recursiva consome espa√ßo na pilha</li>
            <li><strong>Complexidade Exponencial:</strong> Algumas recurs√µes geram complexidade desnecess√°ria</li>
            <li><strong>Consumo de Mem√≥ria:</strong> Uso excessivo da pilha de execu√ß√£o</li>
        </ul>

        <h3>2. Fibonacci: Problema Cl√°ssico</h3>
        <pre><code>// ‚ùå RUIM: Recurs√£o ineficiente
int fibonacci_ruim(int n) {
if (n <= 1) return n;
return fibonacci_ruim(n-1) + fibonacci_ruim(n-2);
}

// ‚úÖ BOM: Vers√£o iterativa eficiente
int fibonacci_bom(int n) {
if (n <= 1) return n;

int a = 0, b = 1, temp;
for (int i = 2; i <= n; i++) {
temp = a + b;
a = b;
b = temp;
}
return b;
}</code></pre>

        <h2 id="aula07">Aula 07: An√°lise Ordena√ß√£o Elementar e Mergesort</h2>
        <p><strong>Objetivos:</strong> Compreender algoritmos de ordena√ß√£o elementares e dominar o Merge Sort.</p>

        <h3>Algoritmos de Ordena√ß√£o Elementares</h3>

        <h4>1. Bubble Sort</h4>
        <pre><code>void bubble_sort(int arr[], int n) {
for (int i = 0; i < n - 1; i++) {
for (int j = 0; j < n - i - 1; j++) {
    if (arr[j] > arr[j + 1]) {
        int temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
    }
}
}
}</code></pre>
        <p><strong>Complexidade:</strong> O(n¬≤) - Melhor caso: O(n) com otimiza√ß√£o</p>

        <h4>2. Selection Sort</h4>
        <pre><code>void selection_sort(int arr[], int n) {
for (int i = 0; i < n - 1; i++) {
int min_idx = i;
for (int j = i + 1; j < n; j++) {
    if (arr[j] < arr[min_idx]) {
        min_idx = j;
    }
}
if (min_idx != i) {
    int temp = arr[min_idx];
    arr[min_idx] = arr[i];
    arr[i] = temp;
}
}
}</code></pre>
        <p><strong>Complexidade:</strong> O(n¬≤) - Sempre faz O(n) trocas</p>

        <h4>3. Merge Sort</h4>
        <pre><code>void merge_sort(int arr[], int left, int right) {
if (left < right) {
int mid = left + (right - left) / 2;

merge_sort(arr, left, mid);
merge_sort(arr, mid + 1, right);

merge(arr, left, mid, right);
}
}</code></pre>
        <p><strong>Complexidade:</strong> O(n log n) - Todos os casos</p>

        <h2 id="aula08">Aula 08: Quicksort e Shellsort</h2>
        <p><strong>Objetivos:</strong> Dominar o Quick Sort e compreender o Shell Sort.</p>

        <h3>Quick Sort</h3>
        <pre><code>void quick_sort(int arr[], int baixo, int alto) {
if (baixo < alto) {
int pi = particionar(arr, baixo, alto);

quick_sort(arr, baixo, pi - 1);
quick_sort(arr, pi + 1, alto);
}
}</code></pre>
        <p><strong>An√°lise:</strong></p>
        <ul>
            <li><strong>Melhor Caso:</strong> O(n log n)</li>
            <li><strong>Pior Caso:</strong> O(n¬≤)</li>
            <li><strong>Caso M√©dio:</strong> O(n log n)</li>
        </ul>

        <h2 id="aula09-12">Aulas 09-12: √Årvores e Grafos</h2>

        <h3>Aula 09: √Årvore Bin√°ria de Busca</h3>
        <p><strong>Objetivos:</strong> Compreender conceitos de √°rvores bin√°rias e implementar BST.</p>

        <pre><code>typedef struct No {
int data;
struct No *esquerda, *direita;
} No;

No* inserir(No *raiz, int data) {
if (raiz == NULL) return criar_no(data);

if (data < raiz->data)
raiz->esquerda = inserir(raiz->esquerda, data);
else if (data > raiz->data)
raiz->direita = inserir(raiz->direita, data);

return raiz;
}</code></pre>

        <h3>Aula 10: Percurso em √Årvores Bin√°rias</h3>
        <p><strong>Tipos de Percurso:</strong></p>
        <ul>
            <li><strong>Em Ordem (In-order):</strong> Esquerda ‚Üí Raiz ‚Üí Direita</li>
            <li><strong>Pr√©-ordem (Pre-order):</strong> Raiz ‚Üí Esquerda ‚Üí Direita</li>
            <li><strong>P√≥s-ordem (Post-order):</strong> Esquerda ‚Üí Direita ‚Üí Raiz</li>
            <li><strong>Por N√≠vel (Level-order):</strong> Usando fila</li>
        </ul>

        <h3>Aula 11: Balanceamento de √Årvore e √Årvore AVL</h3>
        <p><strong>Conceitos:</strong></p>
        <ul>
            <li><strong>Fator de Balanceamento:</strong> altura(direita) - altura(esquerda)</li>
            <li><strong>√Årvore AVL:</strong> |fator de balanceamento| ‚â§ 1</li>
            <li><strong>Rota√ß√µes:</strong> Simples e duplas</li>
        </ul>

        <h3>Aula 12: Grafos - Conceitos e Representa√ß√£o</h3>
        <p><strong>Defini√ß√µes:</strong></p>
        <ul>
            <li><strong>Grafo:</strong> G = (V, E) onde V s√£o v√©rtices e E s√£o arestas</li>
            <li><strong>Representa√ß√µes:</strong> Matriz de adjac√™ncia e Lista de adjac√™ncia</li>
            <li><strong>Algoritmos:</strong> DFS e BFS</li>
        </ul>

        <h2 id="aula13">Aula 13: Roteiro de Laborat√≥rio</h2>
        <p><strong>Objetivos:</strong> Aplicar conceitos te√≥ricos em implementa√ß√µes pr√°ticas.</p>

        <h3>Laborat√≥rios Principais:</h3>
        <ul>
            <li><strong>Lab 1:</strong> Implementa√ß√£o e An√°lise de Algoritmos de Ordena√ß√£o</li>
            <li><strong>Lab 2:</strong> √Årvore Bin√°ria de Busca Completa</li>
            <li><strong>Lab 3:</strong> Sistema de Grafos com Algoritmos</li>
            <li><strong>Lab 4:</strong> Projeto Integrador - Sistema de Gerenciamento</li>
        </ul>

        <h2 id="aula14">Aula 14: Projetos Finais</h2>
        <p><strong>Objetivos:</strong> Aplicar conhecimentos em projetos pr√°ticos complexos.</p>

        <h3>Estrutura dos Projetos:</h3>
        <ul>
            <li><strong>Dura√ß√£o:</strong> 15-20 minutos por equipe</li>
            <li><strong>Composi√ß√£o:</strong> 2-3 alunos por equipe</li>
            <li><strong>Demonstra√ß√£o:</strong> Sistema funcionando + c√≥digo + an√°lise</li>
            <li><strong>Documenta√ß√£o:</strong> Relat√≥rio t√©cnico completo</li>
        </ul>

        <h3>Projetos Dispon√≠veis:</h3>
        <ol>
            <li><strong>Sistema de Roteamento de Rede</strong></li>
            <li><strong>Sistema de Gerenciamento de Banco de Dados Simples</strong></li>
            <li><strong>Compilador para Linguagem Simples</strong></li>
            <li><strong>Sistema de Recomenda√ß√£o Inteligente</strong></li>
            <li><strong>Simulador de Sistema Operacional</strong></li>
            <li><strong>Engine de Jogos 2D com IA</strong></li>
        </ol>

        <div class="pdf-download-grid" style="margin-top: 30px;">
            <a href="aulas/pdf/aulas09-12.pdf" class="pdf-download-item" target="_blank">üìÑ Aulas 09-12 PDF</a>
            <a href="aulas/pdf/aula13.pdf" class="pdf-download-item" target="_blank">üìÑ Aula 13 PDF</a>
            <a href="aulas/pdf/aula14.pdf" class="pdf-download-item" target="_blank">üìÑ Aula 14 PDF</a>
        </div>
        `
    }
};